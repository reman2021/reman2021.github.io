[{"title":"Hexo + NexT 配置优化指南","url":"/2022/04/24/Hexo-NexT配置优化指南/","content":"记录 Hexo + NexT 的配置优化过程，以便后续更改和维护。\n\n<!-- more -->\n\n## 前言\n\nHexo version：5.4.0，NexT version：8.11.0，查看命令为`hexo -v`。   \n**站点配置文件**都是指博客根目录下的 _config.yml 文件，路径为 root/_config.yml。    \n**主题配置文件**都是指主题文件里的 _config.yml 文件，路径为 root/theme/next/_config.yml。     \n\n## 全局配置\n\n### 设置菜单\n\n在**主题配置文件**里查找menu，将注释取消。\n```yaml\nmenu:\n  home: / || fa fa-home\t\t\t\t#首页\n  about: /about/ || fa fa-user\t\t\t#关于\n  #tags: /tags/ || fa fa-tags\t\t\t#标签\n  categories: /categories/ || fa fa-th\t\t#分类\n  archives: /archives/ || fa fa-archive\t\t#归档\n  album: /album/ || fa fa-camera-retro\t\t#相册\n  gallery: /gallery/ || fa fa-paint-brush\t#画廊\n  tools: /tools/ || fa fa-rocket\t\t#工具\n  #schedule: /schedule/ || fa fa-calendar\t#日历\n  #sitemap: /sitemap.xml || fa fa-sitemap\t#站点地图\n  #commonweal: /404/ || fa fa-heartbeat\t\t#腾讯公益404\n```\n“||”前面是对应路径，后面是图标名称。NexT使用的图标库为[Font Awesome](http://www.fontawesome.com.cn/faicons/#web-application)，可自行添加或更换心仪的图标。  \n若想添加新的菜单，则仿照其添加对应的元素、路径和图标，同时在 theme/next/languages/zh-CN.yml 里的 menu 下添加相对应的中文。     \n```yaml\nmenu:\n  home: 首页\n  archives: 归档\n  categories: 分类\n  tags: 标签\n  about: 关于\n  search: 搜索\n  schedule: 日程表\n  sitemap: 站点地图\n  commonweal: 公益 404\n  gallery: 画廊\n  album: 相册\n  tools: 工具\n```\n然后在博客根目录下打开 Git Bash ，输入相应代码：`hexo new page \"菜单名称\"`。   \n此时在博客根目录的 sources 文件夹下会生成对应的文件夹，每个文件夹中都有一个 index.md 文件，对文件内容进行修改，categories 的 index.md 修改如下，其他类推：\n```md\n---\ntitle: 分类\ndate: 2021-08-11 16:47:10\ntype: categories\ncomments: false\n---\n```\n如有添加评论，则页面默认开启评论，要关闭评论将 comment 的值置为 false 即可。  \n\n### 更换网站图标\n\n图标素材：[icons](https://icons8.com/icons/new)   \n下载16x16和32x32的图标后，打开**主题配置文件**，修改 favicon 的 small 和 medium 的路径：   \n```yaml\nfavicon:\n  small: /images/favicon-16x16-iceberg.png\n  medium: /images/favicon-32x32-iceberg.png\n  apple_touch_icon: /images/apple-touch-icon-next.png\n  safari_pinned_tab: /images/logo.svg\n  #android_manifest: /manifest.json\n```\n\n### 网站背景\n\n#### 动态背景\n\n##### Canvas nest \n\n在 root/themes/next 目录下打开 Git Bash ，输入命令：  \n```git\ngit clone https://github.com/theme-next/theme-next-canvas-nest source/lib/canvas-nest\n```\n打开**主题配置文件**，添加如下代码：\n```yaml\n# Canvas nest\n# Dependencies: https://github.com/theme-next/theme-next-canvas nest\n# For more information: https://github.com/hustcc/canvas-nest.js\ncanvas_nest:\n  enable: true\n  onmobile: true # Display on mobile or not\n  color: \"0,0,255\" # RGB values, use `,` to separate\n  opacity: 0.5 # The opacity of line: 0~1\n  zIndex: -1 # z-index property of the background\n  count: 99 # The number of lines\n```\n\n##### Canvas ribbon\n\n打开**主题配置文件**，将 canvas_ribbon 的 enable 置为 true：  \n```yaml\n# Canvas ribbon\n# For more information: https://github.com/hustcc/ribbon.js\ncanvas_ribbon:\n  enable: true\n  size: 300 # The width of the ribbon\n  alpha: 0.6 # The transparency of the ribbon\n  zIndex: -1 # The display level of the ribbon\n```\n\n##### 雪花飘飘\n\n在 root/themes/next/source/js/src 目录下新建 snow1.js 和 snow2.js 两个文件，分别添加以下代码，样式一是六边形的雪花，样式二是小圆点的雪花：\n```js\n/*样式一*/\n(function($){\n\t$.fn.snow = function(options){\n\tvar $flake = $('<div id=\"snowbox\" />').css({'position': 'absolute','z-index':'9999', 'top': '-50px'}).html('&#10052;'),\n\tdocumentHeight \t= $(document).height(),\n\tdocumentWidth\t= $(document).width(),\n\tdefaults = {\n\t\tminSize\t\t: 10,\n\t\tmaxSize\t\t: 20,\n\t\tnewOn\t\t: 1000,\n\t\tflakeColor\t: \"#AFDAEF\" /* 此处可以定义雪花颜色，若要白色可以改为#FFFFFF */\n\t},\n\toptions\t= $.extend({}, defaults, options);\n\tvar interval= setInterval( function(){\n\tvar startPositionLeft = Math.random() * documentWidth - 100,\n\tstartOpacity = 0.5 + Math.random(),\n\tsizeFlake = options.minSize + Math.random() * options.maxSize,\n\tendPositionTop = documentHeight - 200,\n\tendPositionLeft = startPositionLeft - 500 + Math.random() * 500,\n\tdurationFall = documentHeight * 10 + Math.random() * 5000;\n\t$flake.clone().appendTo('body').css({\n\t\tleft: startPositionLeft,\n\t\topacity: startOpacity,\n\t\t'font-size': sizeFlake,\n\t\tcolor: options.flakeColor\n\t}).animate({\n\t\ttop: endPositionTop,\n\t\tleft: endPositionLeft,\n\t\topacity: 0.2\n\t},durationFall,'linear',function(){\n\t\t$(this).remove()\n\t});\n\t}, options.newOn);\n    };\n})(jQuery);\n$(function(){\n    $.fn.snow({ \n\t    minSize: 5, /* 定义雪花最小尺寸 */\n\t    maxSize: 50,/* 定义雪花最大尺寸 */\n\t    newOn: 300  /* 定义密集程度，数字越小越密集 */\n    });\n});\n```\n```js\n/*样式二*/\n/* 控制下雪 */\nfunction snowFall(snow) {\n    /* 可配置属性 */\n    snow = snow || {};\n    this.maxFlake = snow.maxFlake || 200;   /* 最多片数 */\n    this.flakeSize = snow.flakeSize || 10;  /* 雪花形状 */\n    this.fallSpeed = snow.fallSpeed || 1;   /* 坠落速度 */\n}\n/* 兼容写法 */\nrequestAnimationFrame = window.requestAnimationFrame ||\n    window.mozRequestAnimationFrame ||\n    window.webkitRequestAnimationFrame ||\n    window.msRequestAnimationFrame ||\n    window.oRequestAnimationFrame ||\n    function(callback) { setTimeout(callback, 1000 / 60); };\n\ncancelAnimationFrame = window.cancelAnimationFrame ||\n    window.mozCancelAnimationFrame ||\n    window.webkitCancelAnimationFrame ||\n    window.msCancelAnimationFrame ||\n\twindow.oCancelAnimationFrame;\n/* 开始下雪 */\nsnowFall.prototype.start = function(){\n    /* 创建画布 */\n    snowCanvas.apply(this);\n    /* 创建雪花形状 */\n    createFlakes.apply(this);\n    /* 画雪 */\n    drawSnow.apply(this)\n}\n/* 创建画布 */\nfunction snowCanvas() {\n    /* 添加Dom结点 */\n    var snowcanvas = document.createElement(\"canvas\");\n    snowcanvas.id = \"snowfall\";\n    snowcanvas.width = window.innerWidth;\n    snowcanvas.height = document.body.clientHeight;\n    snowcanvas.setAttribute(\"style\", \"position:absolute; top: 0; left: 0; z-index: 1; pointer-events: none;\");\n    document.getElementsByTagName(\"body\")[0].appendChild(snowcanvas);\n    this.canvas = snowcanvas;\n    this.ctx = snowcanvas.getContext(\"2d\");\n    /* 窗口大小改变的处理 */\n    window.onresize = function() {\n        snowcanvas.width = window.innerWidth;\n        /* snowcanvas.height = window.innerHeight */\n    }\n}\n/* 雪运动对象 */\nfunction flakeMove(canvasWidth, canvasHeight, flakeSize, fallSpeed) {\n    this.x = Math.floor(Math.random() * canvasWidth);   /* x坐标 */\n    this.y = Math.floor(Math.random() * canvasHeight);  /* y坐标 */\n    this.size = Math.random() * flakeSize + 2;          /* 形状 */\n    this.maxSize = flakeSize;                           /* 最大形状 */\n    this.speed = Math.random() * 1 + fallSpeed;         /* 坠落速度 */\n    this.fallSpeed = fallSpeed;                         /* 坠落速度 */\n    this.velY = this.speed;                             /* Y方向速度 */\n    this.velX = 0;                                      /* X方向速度 */\n    this.stepSize = Math.random() / 30;                 /* 步长 */\n    this.step = 0                                       /* 步数 */\n}\nflakeMove.prototype.update = function() {\n    var x = this.x,\n        y = this.y;\n    /* 左右摆动(余弦) */\n    this.velX *= 0.98;\n    if (this.velY <= this.speed) {\n        this.velY = this.speed\n    }\n    this.velX += Math.cos(this.step += .05) * this.stepSize;\n\n    this.y += this.velY;\n    this.x += this.velX;\n    /* 飞出边界的处理 */\n    if (this.x >= canvas.width || this.x <= 0 || this.y >= canvas.height || this.y <= 0) {\n        this.reset(canvas.width, canvas.height)\n    }\n};\n/* 飞出边界-放置最顶端继续坠落 */\nflakeMove.prototype.reset = function(width, height) {\n    this.x = Math.floor(Math.random() * width);\n    this.y = 0;\n    this.size = Math.random() * this.maxSize + 2;\n    this.speed = Math.random() * 1 + this.fallSpeed;\n    this.velY = this.speed;\n    this.velX = 0;\n};\n// 渲染雪花-随机形状（此处可修改雪花颜色！！！）\nflakeMove.prototype.render = function(ctx) {\n    var snowFlake = ctx.createRadialGradient(this.x, this.y, 0, this.x, this.y, this.size);\n    snowFlake.addColorStop(0, \"rgba(255, 255, 255, 0.9)\");  /* 此处是雪花颜色，默认是白色 */\n    snowFlake.addColorStop(.5, \"rgba(255, 255, 255, 0.5)\"); /* 若要改为其他颜色，请自行查 */\n    snowFlake.addColorStop(1, \"rgba(255, 255, 255, 0)\");    /* 找16进制的RGB 颜色代码。 */\n    ctx.save();\n    ctx.fillStyle = snowFlake;\n    ctx.beginPath();\n    ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);\n    ctx.fill();\n    ctx.restore();\n};\n/* 创建雪花-定义形状 */\nfunction createFlakes() {\n    var maxFlake = this.maxFlake,\n        flakes = this.flakes = [],\n        canvas = this.canvas;\n    for (var i = 0; i < maxFlake; i++) {\n        flakes.push(new flakeMove(canvas.width, canvas.height, this.flakeSize, this.fallSpeed))\n    }\n}\n/* 画雪 */\nfunction drawSnow() {\n    var maxFlake = this.maxFlake,\n        flakes = this.flakes;\n    ctx = this.ctx, canvas = this.canvas, that = this;\n    /* 清空雪花 */\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    for (var e = 0; e < maxFlake; e++) {\n        flakes[e].update();\n        flakes[e].render(ctx);\n    }\n    /*  一帧一帧的画 */\n    this.loop = requestAnimationFrame(function() {\n        drawSnow.apply(that);\n    });\n}\n/* 调用及控制方法 */\nvar snow = new snowFall({maxFlake:60});\nsnow.start();\n```\n接下来在 root/themes/next/layout/_layout.njk 引入jQuery，如果之前已经引入了 jQuery ，则忽略这一步：\n```html\n  <!-- 引入jQuery -->\n  <script type=\"text/javascript\" src=\"//libs.baidu.com/jquery/1.8.3/jquery.min.js\"></script>\n```\n再在后面添加如下代码：\n```html\n  <!-- 雪花特效1 -->\n  {% if theme.snow1.enable %}\n      <script type=\"text/javascript\" src=\"/js/snow1.js\"></script>\n  {% endif %}\n  <!-- 雪花特效2 -->\n  {% if theme.snow2.enable %}\n      <script type=\"text/javascript\" src=\"/js/snow2.js\"></script>\n  {% endif %}\n```\n最后在**主题配置文件**加入配置代码：\n```yaml\n# 雪花特效1\nsnow1: \n enable: true\n\n# 雪花特效2\nsnow2: \n enable: false\n```\n\n#### 背景图片\n\n将背景图片放到 root/themes/next/source/images 下。    \n打开**主题配置文件**，将 style: source/_data/styles.styl 取消注释：  \n```yaml\ncustom_file_path:\n  style: source/_data/styles.styl\n```\n在 root/source 下创建文件_data/styles.styl，添加以下内容：  \n```styl\n// 添加背景图片\n// 添加背景图片\nbody {\n      background: url(/images/background.jpg);\t// 可以是路径也可以是链接\n      background-size: cover\t\t\t// 设置保持图像的纵横比并将图像缩放成将完全覆盖背景定位区域的最小大小\n      background-repeat: no-repeat;\t\t// 设定背景图片非重复填充\n      background-attachment: fixed;\t\t// 设置背景图片不随页面滚动\n      background-position: 50% 50%;\t\t// 图片位置：居中\n}\n```\n\n### 添加Fork me on Github\n\n打开 [Github Corners](https://tholman.com/github-corners/),选择喜欢的样式，复制相应代码到 root/themes/next/layout/_layout.njk 文件中，放在`<div class=\"headband\"></div>`后面，并修改`href=\"https://your-url\"`里的网址为自己 GitHub 主页的网址。   \n如图：\n![](https://cdn.jsdelivr.net/gh/reman2021/ImageHosting/zcw-blog-pictureSnipaste_2022-04-25_13-41-38.png)\n\n### 安装RSS插件\n\nRSS需要有一个Feed链接，而这个链接需要靠hexo-generator-feed插件来生成，所以首先需要添加插件，在根目录打开Git Bash执行安装指令：   \n`npm install hexo-generator-feed --save`  \n安装完成后在**站点配置文件**末尾加上如下代码：\n```yaml\nfeed:\n  type: atom\n  path: atom.xml\n  limit: 20\n  hub:\n  content:\n  content_limit: 140\n  content_limit_delim: ' '\n  order_by: -date\n  icon: icon.png\n  autodiscovery: true\n  template:\n```\n\n### 添加进度显示和回到顶部按钮\n\n#### NexT主题自带\n\n在**主题配置文件**里找到 back2top 项进行修改\n```yaml\nback2top:\n  enable: true\t\t\t#页面右下角显示回到顶部按钮\n  # Back to top in sidebar.\n  sidebar: false\t\t#为true时按钮位置变为侧边栏底部\n  # Scroll percent label in b2t button.\n  scrollpercent: true\t#显示浏览进度百分比\n```\n\n#### moon-cake样式\n\n输入如下命令下载：  \n`npm install hexo-cake-moon-menu`  \n在**主题配置文件**里添加下面代码：  \n```yaml\nmoon_menu:\n  back2top:\n    enable: true\n    icon: fas fa-chevron-up\n    order: -1\n  back2bottom:\n    enable: true\n    icon: fas fa-chevron-down\n    order: -2\n```\n\n### 添加可切换的夜间模式\n\n输入命令`npm install hexo-next-darkmode --save`安装插件，注意安装前先关闭自带的黑暗模式。    \n安装完成后在**主题配置文件**里添加以下代码：\n```yaml\n# Darkmode JS\n# For more information: https://github.com/rqh656418510/hexo-next-darkmode, https://github.com/sandoche/Darkmode.js\ndarkmode_js:\n  enable: true\n  bottom: '64px' # default: '32px'\n  right: 'unset' # default: '32px'\n  left: '32px' # default: 'unset'\n  time: '0.5s' # default: '0.3s'\n  mixColor: 'transparent' # default: '#fff'\n  backgroundColor: 'transparent' # default: '#fff'\n  buttonColorDark: '#100f2c' # default: '#100f2c'\n  buttonColorLight: '#fff' # default: '#fff'\n  isActivated: true # default false\n  saveInCookies: true # default: true\n  label: '🌓' # default: ''\n  autoMatchOsTheme: true # default: true\n  libUrl: # Set custom library cdn url for Darkmode.js\n\n```\n\n### 开启本地搜索\n\n首先通过命令`npm install hexo-generator-search --save`安装插件。   \n安装完成后在**站点配置文件**内添加以下内容：  \n```yaml\n#本地搜索\nsearch:\n  path: search.xml\n  field: post\n  format: html\n  limit: 10000\n```\n最后修改**主题配置文件**里 local_search 的 enable 值为 true ，启用本地搜索。  \n```\nlocal_search:\n  enable: true\n  # If auto, trigger search by changing input.\n  # If manual, trigger search by pressing enter key or search button.\n  trigger: auto\n  # Show top n results per article, show all results by setting to -1\n  top_n_per_article: 1\n  # Unescape html strings to the readable one.\n  unescape: false\n  # Preload the search data when the page loads.\n  preload: false\n```\n\n### 点击放大图片\n\n将**主题配置文件**内 fancybox 的值置为 true即可。 \n\n### 添加评论系统 waline \n\n按照[waline 快速上手](https://waline.js.org/guide/get-started.html#leancloud-%E8%AE%BE%E7%BD%AE-%E6%95%B0%E6%8D%AE%E5%BA%93)进行配置，注意LeanCloud 注册时左上角选择国际版，后续添加环境变量时不用绑定域名，比较方便。   \n配置完成后执行命令`npm install @waline/hexo-next`安装官方插件，然后在**主题配置文件**添加如下内容：  \n```yaml\n# Waline\n# For more information: https://waline.js.org, https://github.com/walinejs/waline\nwaline:\n  enable: true #是否开启\n  serverURL:  # Waline #服务端地址，就是上面部署的 Vercel 地址\n  placeholder: 请文明评论呀 #评论框的默认文字\n  avatar: mm # 头像风格\n  meta: [nick, mail, link] # 自定义评论框上面的三个输入框的内容\n  pageSize: 10 # 评论数量多少时显示分页\n  lang: zh-cn # 语言, 可选值: en, zh-cn\n  visitor: false # 文章阅读统计\n  comment_count: true # 如果为 false , 评论数量只会在当前评论页面显示, 主页则不显示\n  requiredFields: [] # 设置用户评论时必填的信息，[nick,mail]: [nick] | [nick, mail]\n  libUrl: # Set custom library cdn url\n```\n\n### 边框圆角\n\n在**主题配置文件**里将 variable 的注释取消：  \n```yaml\ncustom_file_path:\n  variable: source/_data/variables.styl\n```\n在 root/source/_data 下新建 variables.styl ，添加如下内容：  \n```styl\n// 圆角设置\n$border-radius-inner     = 20px 20px 20px 20px;\n$border-radius           = 20px;\n```\n\n### 繁简体切换\n\n首先下载简繁字体切换所需的[tw_cn.js](https://tding.top/js/tw_cn.js)文件。   \n然后在想要显示简繁转换按钮的地方添加如下代码：\n```html\n<div class=\"translate-style\">\n繁/简：<a id=\"translateLink\" href=\"javascript:translatePage();\">繁体\n</a>\n</div>\n<script type=\"text/javascript\" src=\"/js/tw_cn.js\"></script>\n<script type=\"text/javascript\">\nvar defaultEncoding = 2; //网站编写字体是否繁体，1-繁体，2-简体\nvar translateDelay = 0; //延迟时间,若不在前, 要设定延迟翻译时间, 如100表示100ms,默认为0\nvar cookieDomain = \"https://tding.top/\"; //Cookie地址, 一定要设定, 通常为你的网址\nvar msgToTraditionalChinese = \"繁体\"; //此处可以更改为你想要显示的文字\nvar msgToSimplifiedChinese = \"简体\"; //同上，但两处均不建议更改\nvar translateButtonId = \"translateLink\"; //默认互换id\ntranslateInitilization();\n</script>\n```\n\n### 更换字体\n\nhost 使用[烧饼博客](https://u.sb/css-cdn/)提供的镜像。   \n在主题配置文件对 font 进行如下修改：\n```yaml\nfont:\n  enable: true\n \n  # Uri of fonts host, e.g. https://fonts.googleapis.com (Default).\n  # 使用烧饼博客的CDN\n  host: https://fonts.loli.net\n \n  # Font options:\n  # `external: true` will load this font family from `host` above.\n  # `family: Times New Roman`. Without any quotes.\n  # `size: x.x`. Use `em` as unit. Default: 1 (16px)\n \n  # Global font settings used for all elements inside <body>.\n  # 全局字体设置\n  global:\n    external: true\n    #family: EB Garamond\n    family: Noto Serif SC\n    size: 0.9\n \n  # Font settings for site title (.site-title).\n  # .site-title 站点标题字体设置\n  title:\n    external: true\n    family: EB Garamond\n    size:\n \n  # Font settings for headlines (<h1> to <h6>).\n  # 文章标题字体设置\n  headings:\n    external: true\n    #family: Roboto Slab\n    family: EB Garamond\n    size:\n \n  # Font settings for posts (.post-body).\n  # 文章页面字体设置\n  posts:\n    external: true\n    #family: Roboto Slab\n \n  # Font settings for <code> and code blocks.\n  # 代码块字体设置\n  codes:\n    external: true\n    family: Source Code Pro\n```\n\n### 首页顶部留白\n\n在 root/source/_data/styles.styl里添加如下内容：  \n```styl\n//首页顶部留白\n.container{margin-top:10px;} \n```\n\n### 鼠标点击烟花效果\n\n下载[JavaScript 脚本](https://aliyun-oss-pic-bucket.oss-cn-beijing.aliyuncs.com/file/fireworks.js)，放在 root/themes/next/source/js/cursor/ 下。  \n然后在 root/themes/next/layout/_custom/custom.njk 中添加如下内容：   \n```html\n{# 鼠标点击烟花特效 #}\n{% if theme.cursor_effect == \"fireworks\" %}\n  <script async src=\"/js/cursor/fireworks.js\"></script>\n{% elseif theme.cursor_effect == \"explosion\" %}\n  <canvas class=\"fireworks\" style=\"position: fixed;left: 0;top: 0;z-index: 1; pointer-events: none;\" ></canvas>\n  <script src=\"//cdn.bootcss.com/animejs/2.2.0/anime.min.js\"></script>\n  <script async src=\"/js/cursor/explosion.min.js\"></script>\n{% elseif theme.cursor_effect == \"love\" %}\n  <script async src=\"/js/cursor/love.min.js\"></script>\n{% elseif theme.cursor_effect == \"text\" %}\n  <script async src=\"/js/cursor/text.js\"></script>\n{% endif %}\n```\n并且在 root/themes/next/layout/_layout.njk 中添加`{% include '_custom/custom.swig' %}`。位置如下：   \n![](https://cdn.jsdelivr.net/gh/reman2021/ImageHosting/zcw-blog-pictureSnipaste_2022-04-25_21-58-49.png)\n最后在**主题配置文件**加入以下内容即可：    \n```yaml\n# 鼠标点击烟花特效\ncursor_effect: fireworks\n```\n\n## 侧边栏配置\n\n### 侧边栏头像\n\n将头像（jpg、gif）放到 root/themes/next/source/images 下，打开**主题配置文件**，修改 avatar 的 url：  \n``` yaml\n# Sidebar Avatar\navatar:\n  # Replace the default image and set the url here.\n  url: /images/avatar.gif\t#图片的位置，也可以是链接：http://xxx.com/avatar.png\n  # If true, the avatar will be displayed in circle.\n  rounded: true\t\t#头像展示在圆框里\n  # If true, the avatar will be rotated with the cursor.\n  rotated: false\t\t#头像随光标旋转\n```\n\n### 添加 social 链接\n\n打开**主题配置文件**，在 social 下添加链接：  \n```yaml\nsocial:\n  GitHub: https://github.com/reman2021 || fab fa-github\n  CSDN: https://blog.csdn.net/m0_55420671?spm=1010.2135.3001.5343 || fab fa-codiepie\n  RSS: /atom.xml || fa fa-rss\n```\n\n### 更改侧边栏透明度\n\n在 root/source/_data/styles.styl 里添加如下内容：\n```styl​\n//侧边框的透明度设置\n.sidebar {\n  background-color: transparent;\n  opacity: 0.9;\n}\n​\n//菜单栏的透明度设置\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n```\n\n### 侧边栏添加 canvas 粒子时钟\n\n在 root/themes/next/layout/_custom/ 目录下新建 clock.njk 文件，添加如下内容：\n```html\n<div style=\"\">\n  <canvas id=\"canvas\" style=\"width:60%;\">当前浏览器不支持canvas，请更换浏览器后再试</canvas>\n</div>\n<script>\n(function(){\n\n   var digit=\n    [\n        [\n            [0,0,1,1,1,0,0],\n            [0,1,1,0,1,1,0],\n            [1,1,0,0,0,1,1],\n            [1,1,0,0,0,1,1],\n            [1,1,0,0,0,1,1],\n            [1,1,0,0,0,1,1],\n            [1,1,0,0,0,1,1],\n            [1,1,0,0,0,1,1],\n            [0,1,1,0,1,1,0],\n            [0,0,1,1,1,0,0]\n        ],//0\n        [\n            [0,0,0,1,1,0,0],\n            [0,1,1,1,1,0,0],\n            [0,0,0,1,1,0,0],\n            [0,0,0,1,1,0,0],\n            [0,0,0,1,1,0,0],\n            [0,0,0,1,1,0,0],\n            [0,0,0,1,1,0,0],\n            [0,0,0,1,1,0,0],\n            [0,0,0,1,1,0,0],\n            [1,1,1,1,1,1,1]\n        ],//1\n        [\n            [0,1,1,1,1,1,0],\n            [1,1,0,0,0,1,1],\n            [0,0,0,0,0,1,1],\n            [0,0,0,0,1,1,0],\n            [0,0,0,1,1,0,0],\n            [0,0,1,1,0,0,0],\n            [0,1,1,0,0,0,0],\n            [1,1,0,0,0,0,0],\n            [1,1,0,0,0,1,1],\n            [1,1,1,1,1,1,1]\n        ],//2\n        [\n            [1,1,1,1,1,1,1],\n            [0,0,0,0,0,1,1],\n            [0,0,0,0,1,1,0],\n            [0,0,0,1,1,0,0],\n            [0,0,1,1,1,0,0],\n            [0,0,0,0,1,1,0],\n            [0,0,0,0,0,1,1],\n            [0,0,0,0,0,1,1],\n            [1,1,0,0,0,1,1],\n            [0,1,1,1,1,1,0]\n        ],//3\n        [\n            [0,0,0,0,1,1,0],\n            [0,0,0,1,1,1,0],\n            [0,0,1,1,1,1,0],\n            [0,1,1,0,1,1,0],\n            [1,1,0,0,1,1,0],\n            [1,1,1,1,1,1,1],\n            [0,0,0,0,1,1,0],\n            [0,0,0,0,1,1,0],\n            [0,0,0,0,1,1,0],\n            [0,0,0,1,1,1,1]\n        ],//4\n        [\n            [1,1,1,1,1,1,1],\n            [1,1,0,0,0,0,0],\n            [1,1,0,0,0,0,0],\n            [1,1,1,1,1,1,0],\n            [0,0,0,0,0,1,1],\n            [0,0,0,0,0,1,1],\n            [0,0,0,0,0,1,1],\n            [0,0,0,0,0,1,1],\n            [1,1,0,0,0,1,1],\n            [0,1,1,1,1,1,0]\n        ],//5\n        [\n            [0,0,0,0,1,1,0],\n            [0,0,1,1,0,0,0],\n            [0,1,1,0,0,0,0],\n            [1,1,0,0,0,0,0],\n            [1,1,0,1,1,1,0],\n            [1,1,0,0,0,1,1],\n            [1,1,0,0,0,1,1],\n            [1,1,0,0,0,1,1],\n            [1,1,0,0,0,1,1],\n            [0,1,1,1,1,1,0]\n        ],//6\n        [\n            [1,1,1,1,1,1,1],\n            [1,1,0,0,0,1,1],\n            [0,0,0,0,1,1,0],\n            [0,0,0,0,1,1,0],\n            [0,0,0,1,1,0,0],\n            [0,0,0,1,1,0,0],\n            [0,0,1,1,0,0,0],\n            [0,0,1,1,0,0,0],\n            [0,0,1,1,0,0,0],\n            [0,0,1,1,0,0,0]\n        ],//7\n        [\n            [0,1,1,1,1,1,0],\n            [1,1,0,0,0,1,1],\n            [1,1,0,0,0,1,1],\n            [1,1,0,0,0,1,1],\n            [0,1,1,1,1,1,0],\n            [1,1,0,0,0,1,1],\n            [1,1,0,0,0,1,1],\n            [1,1,0,0,0,1,1],\n            [1,1,0,0,0,1,1],\n            [0,1,1,1,1,1,0]\n        ],//8\n        [\n            [0,1,1,1,1,1,0],\n            [1,1,0,0,0,1,1],\n            [1,1,0,0,0,1,1],\n            [1,1,0,0,0,1,1],\n            [0,1,1,1,0,1,1],\n            [0,0,0,0,0,1,1],\n            [0,0,0,0,0,1,1],\n            [0,0,0,0,1,1,0],\n            [0,0,0,1,1,0,0],\n            [0,1,1,0,0,0,0]\n        ],//9\n        [\n            [0,0,0,0,0,0,0],\n            [0,0,1,1,1,0,0],\n            [0,0,1,1,1,0,0],\n            [0,0,1,1,1,0,0],\n            [0,0,0,0,0,0,0],\n            [0,0,0,0,0,0,0],\n            [0,0,1,1,1,0,0],\n            [0,0,1,1,1,0,0],\n            [0,0,1,1,1,0,0],\n            [0,0,0,0,0,0,0]\n        ]//:\n    ];\n\nvar canvas = document.getElementById('canvas');\n\nif(canvas.getContext){\n    var cxt = canvas.getContext('2d');\n    //声明canvas的宽高\n    var H = 100,W = 700;\n    canvas.height = H;\n    canvas.width = W;\n    cxt.fillStyle = '#f00';\n    cxt.fillRect(10,10,50,50);\n\n    //存储时间数据\n    var data = [];\n    //存储运动的小球\n    var balls = [];\n    //设置粒子半径\n    var R = canvas.height/20-1;\n    (function(){\n        var temp = /(\\d)(\\d):(\\d)(\\d):(\\d)(\\d)/.exec(new Date());\n        //存储时间数字，由十位小时、个位小时、冒号、十位分钟、个位分钟、冒号、十位秒钟、个位秒钟这7个数字组成\n        data.push(temp[1],temp[2],10,temp[3],temp[4],10,temp[5],temp[6]);\n    })();\n\n    /*生成点阵数字*/\n    function renderDigit(index,num){\n        for(var i = 0; i < digit[num].length; i++){\n            for(var j = 0; j < digit[num][i].length; j++){\n                if(digit[num][i][j] == 1){\n                    cxt.beginPath();\n                    cxt.arc(14*(R+2)*index + j*2*(R+1)+(R+1),i*2*(R+1)+(R+1),R,0,2*Math.PI);\n                    cxt.closePath();\n                    cxt.fill();\n                }\n            }\n        }\n    }\n\n    /*更新时钟*/\n    function updateDigitTime(){\n        var changeNumArray = [];\n        var temp = /(\\d)(\\d):(\\d)(\\d):(\\d)(\\d)/.exec(new Date());\n        var NewData = [];\n        NewData.push(temp[1],temp[2],10,temp[3],temp[4],10,temp[5],temp[6]);\n        for(var i = data.length-1; i >=0 ; i--){\n            //时间发生变化\n            if(NewData[i] !== data[i]){\n                //将变化的数字值和在data数组中的索引存储在changeNumArray数组中\n                changeNumArray.push(i+'_'+(Number(data[i])+1)%10);\n            }\n        }\n        //增加小球\n        for(var i = 0; i< changeNumArray.length; i++){\n            addBalls.apply(this,changeNumArray[i].split('_'));\n        }\n        data = NewData.concat();\n    }\n\n    /*更新小球状态*/\n    function updateBalls(){\n        for(var i = 0; i < balls.length; i++){\n            balls[i].stepY += balls[i].disY;\n            balls[i].x += balls[i].stepX;\n            balls[i].y += balls[i].stepY;\n            if(balls[i].x > W + R || balls[i].y > H + R){\n                balls.splice(i,1);\n                i--;\n            }\n        }\n    }\n\n    /*增加要运动的小球*/\n    function addBalls(index,num){\n        var numArray = [1,2,3];\n        var colorArray =  [\"#3BE\",\"#09C\",\"#A6C\",\"#93C\",\"#9C0\",\"#690\",\"#FB3\",\"#F80\",\"#F44\",\"#C00\"];\n        for(var i = 0; i < digit[num].length; i++){\n            for(var j = 0; j < digit[num][i].length; j++){\n                if(digit[num][i][j] == 1){\n                    var ball = {\n                        x:14*(R+2)*index + j*2*(R+1)+(R+1),\n                        y:i*2*(R+1)+(R+1),\n                        stepX:Math.floor(Math.random() * 4 -2),\n                        stepY:-2*numArray[Math.floor(Math.random()*numArray.length)],\n                        color:colorArray[Math.floor(Math.random()*colorArray.length)],\n                        disY:1\n                    };\n                    balls.push(ball);\n                }\n            }\n        }\n    }\n\n    /*渲染*/\n    function render(){\n        //重置画布宽度，达到清空画布的效果\n        canvas.height = 100;\n        //渲染时钟\n        for(var i = 0; i < data.length; i++){\n            renderDigit(i,data[i]);\n        }\n        //渲染小球\n        for(var i = 0; i < balls.length; i++){\n            cxt.beginPath();\n            cxt.arc(balls[i].x,balls[i].y,R,0,2*Math.PI);\n            cxt.fillStyle = balls[i].color;\n            cxt.closePath();\n            cxt.fill();\n        }\n    }\n\n    clearInterval(oTimer);\n    var oTimer = setInterval(function(){\n        //更新时钟\n        updateDigitTime();\n        //更新小球状态\n        updateBalls();\n        //渲染\n        render();\n    },50);\n}\n\n})();\n</script>\n\n```\n然后在博客目录\\themes\\next\\layout\\_macro\\sidebar.njk尾部中引入：  \n```html\n\t{% if theme.diy_time.clock %}\n\t  <!-- canvas粒子时钟 -->\n\t  {% include '../_custom/clock.swig' %}\n\t{% endif %}\n```\n注：代码块要放置在 sider-inner 的 div 块中，放在 div 块的位置决定时钟样式的展示位置。   \n最后在**主题配置文件**中加入应用代码：\n```yaml\n# 侧栏粒子时钟\ndiy_time:\n  runtime: true \n  clock: true # 粒子时钟\n\n```\n\n## 页脚配置\n\n### 设置建站时间和网站运行时间\n\n#### 设置建站时间\n\n打开**主题配置文件**，在 since 后添加建站时间：     \n```yaml\nfooter:\n  # Specify the year when the site was setup. If not defined, current year will be used.\n  since: 2021-08-11\t\t#建站时间\n```\n\n#### 页脚添加网站运行时间\n\n将下面代码添加到 root/themes/next/layout/_partials/footer.njk 文件的合适位置，修改`var t1 = Date.UTC(2021,08,11,00,00,00);`为自己的建站时间。   \n```html\n<span id=\"sitetime\"></span>\n<script language=javascript>\n\tfunction siteTime(){\n\t\twindow.setTimeout(\"siteTime()\", 1000);\n\t\tvar seconds = 1000;\n\t\tvar minutes = seconds * 60;\n\t\tvar hours = minutes * 60;\n\t\tvar days = hours * 24;\n\t\tvar years = days * 365;\n\t\tvar today = new Date();\n\t\tvar todayYear = today.getFullYear();\n\t\tvar todayMonth = today.getMonth()+1;\n\t\tvar todayDate = today.getDate();\n\t\tvar todayHour = today.getHours();\n\t\tvar todayMinute = today.getMinutes();\n\t\tvar todaySecond = today.getSeconds();\n\t\t/* \n\t\tDate.UTC() -- 返回date对象距世界标准时间(UTC)1970年1月1日午夜之间的毫秒数(时间戳)\n\t\tyear - 作为date对象的年份，为4位年份值\n\t\tmonth - 0-11之间的整数，做为date对象的月份\n\t\tday - 1-31之间的整数，做为date对象的天数\n\t\thours - 0(午夜24点)-23之间的整数，做为date对象的小时数\n\t\tminutes - 0-59之间的整数，做为date对象的分钟数\n\t\tseconds - 0-59之间的整数，做为date对象的秒数\n\t\tmicroseconds - 0-999之间的整数，做为date对象的毫秒数\n        */\n\t\tvar t1 = Date.UTC(2021,08,11,00,00,00); //北京时间2021-8-11 00:00:00\n\t\tvar t2 = Date.UTC(todayYear,todayMonth,todayDate,todayHour,todayMinute,todaySecond);\n\t\tvar diff = t2-t1;\n\t\tvar diffYears = Math.floor(diff/years);\n\t\tvar diffDays = Math.floor((diff/days)-diffYears*365);\n\t\tvar diffHours = Math.floor((diff-(diffYears*365+diffDays)*days)/hours);\n\t\tvar diffMinutes = Math.floor((diff-(diffYears*365+diffDays)*days-diffHours*hours)/minutes);\n\t\tvar diffSeconds = Math.floor((diff-(diffYears*365+diffDays)*days-diffHours*hours-diffMinutes*minutes)/seconds);\n\t\tdocument.getElementById(\"sitetime\").innerHTML=\" 本站已悄悄运行\"+/*diffYears+\" 年 \"+*/diffDays+\" 天 \"+diffHours+\" 小时 \"+diffMinutes+\" 分钟 \"+diffSeconds+\" 秒\";\n\t}\n\tsiteTime();\n</script>\n```\n\n### 底部图标配置\n\n在**主题配置文件**里找到 footer 下的 icon 配置项进行修改\n```yaml\n  # Icon between year and copyright info.\n  icon:\n    # Icon name in Font Awesome. See: https://fontawesome.com/icons\n    name: fa fa-heart\t#图标名称，来源Font Awesome图标库\n    # If you want to animate the icon, set it to true.\n    animated: true\t\t#图标跳动\n    # Change the color of icon, using Hex Code.\n    color: \"#ff0000\"\t#图标颜色\n```\n\n## 文章配置\n\n###  显示文章字数和阅读时长\n\n根目录打开 Git Bash ，执行下面的命令，安装插件：    \n\n`npm install hexo-wordcount --save`\n\n然后在**站点配置文件**末尾加上下面的代码：\n```yaml\nsymbols_count_time:\n  symbols: true                # 文章字数统计\n  time: true                   # 文章阅读时长\n  total_symbols: true          # 站点总字数统计\n  total_time: true             # 站点总阅读时长\n  exclude_codeblock: false     # 排除代码字数统计\n```\n\n### 自定义博文内链接颜色\n\n在 root/themes/next/source/css/_common/components/post/post-body.styl 文件里添加如下代码：\n```styl\n.post-body p a{\n     color: #ba2f7b;\t\t//链接颜色\n     border-bottom: none;\n     &:hover {\n       color: #815c94;\t\t//光标悬停时链接颜色\n       text-decoration: underline;\n     }\n   }\n```\n\n### 文章末尾添加结束标记\n\n在 root/themes/next/layout/_macro 中新建 passage-end-tag.njk 文件,并添加以下内容，分割线中间内容可自定义：   \n```html\n<div>\n    {% if not is_index %}\n        <div style=\"text-align:center;color: #ccc;font-size:24px;\">--------------------------  <i class=\"fa fa-battery-full\" aria-hidden=\"true\"></i>  --------------------------</div>\n    {% endif %}\n</div>\n```\n接着打开 root/themes/next/layout/_macro/post.njk 文件，在 END POST BODY 后添加代码：  \n```html\n {% if not is_index and theme.passage_end_tag.enabled %}\n   <div>\n     {% include 'passage-end-tag.swig' %}\n   </div>\n {% endif %}\n```\n具体位置如图：   \n![](https://cdn.jsdelivr.net/gh/reman2021/ImageHosting/zcw-blog-pictureSnipaste_2022-04-25_13-26-50.png)   \n\n### 文章添加版权说明\n\n在**主题配置文件**中找到 creative_commons 进行修改：\n```yaml\ncreative_commons:\n  license: by-nc-sa\n  sidebar: true\n  post: true  \t\t# 将false改为true即可显示版权信息\n  language:\n```\n\n### 代码样式自定义\n\n在 root/source/_data/styles.styl 添加以下内容：\n```styl\n// Custom styles.\ncode {\n    color: #B22222;\t\t\t//代码颜色\n    background: #fbf7f8;\t//代码背景颜色\n    margin: 5px;\n}\n```\n\n### 代码块样式更改\n\n在**主题配置文件**里找到 codeblock 进行修改，代码块主题可到[NexT Highlight Theme Preview](https://theme-next.js.org/highlight/)预览。   \n```yaml\ncodeblock:\n  # Code Highlight theme\n  # All available themes: https://theme-next.js.org/highlight/\n  theme:\n    light: default\n    dark: stackoverflow-dark\n  prism:\n    light: prism\n    dark: prism-dark\n  # Add copy button on codeblock\n  copy_button:\n    enable: true\n    # Available values: default | flat | mac\n    style: mac\n```\n\n### 文章目录默认展开\n\n如果文章内容是多级目录，默认二级目录是合并的。可更改**主题配置文件**中 toc 的 expand_all 为 true 来让文章目录默认展开。  \n```yaml\ntoc:\n  enable: true\n  # Automatically add list number to toc.\n  number: true\n  # If true, all words will placed on next lines if header width longer then sidebar width.\n  wrap: false\n  # If true, all level of TOC in a post will be displayed, rather than the activated part of it.\n  expand_all: true\n  # Maximum heading depth of generated toc.\n  max_depth: 6\n```\n\n### 更改背板透明度\n\n在 root/source/_data/styles.styl里添加如下内容：  \n```styl\n//文章背板透明度\n.main-inner > .sub-menu, .main-inner > .post-block, .main-inner > .tabs-comment, .main-inner > .comments, .main-inner > .pagination{\n  opacity: 0.9;\n}\n```\n\n### 修改标题下文章描述文字的颜色\n\n在 root/source/_data/styles.styl里添加如下内容：  \n```styl\n.posts-expand .post-meta-container {\t//标题下的文字颜色\n    color: #346c9c;\n}\n```\n\n## 参考文章\n\n[NexT使用文档](http://theme-next.iissnan.com/)\n[Hexo博客Next主题添加粒子时钟特效](https://blog.csdn.net/Aoman_Hao/article/details/102906556)\n[Next7.8主题更换思源宋体](https://www.heson10.com/posts/19246.html)","tags":["搭建博客","Next"],"categories":["维护日志"]},{"title":"小笔记-积化和差、和差化积公式","url":"/2021/10/01/小笔记-积化和差、和差化积公式/","content":"本文主要用于测试mathjax渲染功能\n\n <!-- more -->\n\n## 和差化积：\n\n$$\n\\sin x+\\sin y=2 \\sin \\frac{x+y}{2} \\cos \\frac{x-y}{2}\n$$\n$$\n\\sin x-\\sin y=2 \\cos \\frac{x+y}{2} \\sin \\frac{x-y}{2}\n$$\n$$\n\\cos x+\\cos y=2 \\cos \\frac{x+y}{2} \\cos \\frac{x-y}{2}\n$$\n$$\n\\cos x-\\cos y=-2 \\sin \\frac{x+y}{2} \\sin \\frac{x-y}{2}\n$$\n\n## 积化和差：\n\n$$\n\\sin x \\sin y=-\\frac{1}{2}[\\cos (x+y)-\\cos (x-y)]\n$$\n$$\n\\cos x \\cos y=\\frac{1}{2}[\\cos (x+y)+\\cos (x-y)]\n$$\n$$\n\\sin x \\cos y=\\frac{1}{2}[\\sin (x+y)+\\sin (x-y)]\n$$\n\n辅助记忆口诀：\n\n正加正，正在前，余加余，余并肩\n\n正减正，余在前，余减余，负正弦","tags":["公式"],"categories":["小笔记"]},{"title":"使用Jetson Nano向PX4提供t265位置信息，实现室内定点飞行","url":"/2021/09/07/使用jetson nano向px4提供t265位置信息，实现室内定点飞行/","content":"\n本文作者：南京航空航天大学 科技中心 陈思祺\n\n <!-- more -->\n\n使用的Jetson Nano镜像版本：4.6（2021-08-04发布）\n\n[NVIDIA官方镜像下载链接](https://developer.nvidia.com/zh-cn/embedded/downloads)\n \n![](https://cdn.jsdelivr.net/gh/reman2021/ImageHosting@main/zcw-blog-picture/img1.jpg)\n\n下载好镜像，烧录进TF卡，初次开机简单配置后进入系统，建议系统语言选择英语，正式开始本次教程\n\n\n\n#### 1.更新软件列表，更新软件\n\n```shell\nsudo apt-get update \nsudo apt-get upgrade \n```\n\n#### 2.安装 ROS Melodic\n\n参考[官网安装教程](http://wiki.ros.org/melodic/Installation/Ubuntu)\n\n```shell\n# 设置sources.list\nsudo sh -c 'echo \"deb http://packages.ros.org/ros/ubuntu $(lsb_release -sc) main\" > /etc/apt/sources.list.d/ros-latest.list'\n# 设置密钥\nsudo apt install curl\ncurl -s https://raw.githubusercontent.com/ros/rosdistro/master/ros.asc | sudo apt-key add -\n# 确保 Debian 包索引是最新的\nsudo apt update\n# 安装桌面完整版（推荐）\nsudo apt install ros-melodic-desktop-full\n# 设置环境\necho \"source /opt/ros/melodic/setup.bash\" >> ~/.bashrc\nsource ~/.bashrc\n# 安装 rosdep\nsudo apt install python-rosdep\n# 初始化 rosdep\nsudo rosdep init\nrosdep update\n# 试一下效果\nroscore\n```\n\n#### 3.安装realsense\n\n参考[官网安装教程](https://github.com/IntelRealSense/librealsense/blob/master/doc/installation.md)\n\n安装过程中请拔下摄像头\n\n##### 3.1 安装Realsense SDK\n\n```shell\n# 下载source \n# 可使用Proxy代理加速下载。详见：https://ghproxy.com/\ngit clone https://github.com/IntelRealSense/librealsense\ncd librealsense\n# 安装依赖项 \nsudo apt-get install libudev-dev pkg-config libgtk-3-dev\nsudo apt-get install libusb-1.0-0-dev pkg-config\nsudo apt-get install libglfw3-dev\nsudo apt-get install libssl-dev\n# 安装位于 librealsense 源目录中的 Intel Realsense 权限脚本\nsudo cp config/99-realsense-libusb.rules /etc/udev/rules.d/\nsudo udevadm control --reload-rules && udevadm trigger \n# 编译\nmkdir build\ncd build\ncmake ../ -DBUILD_EXAMPLES=true\nmake\nsudo make install\n# 试一下效果\nrealsense-viewer\n```\n\n##### 3.2 安装realsense-ros\n\n```shell\n# 下载source\nmkdir -p ~/catkin_ws/src\ncd ~/catkin_ws/src/\ngit clone https://github.com/IntelRealSense/realsense-ros.git\ngit clone https://github.com/pal-robotics/ddynamic_reconfigure\ncd realsense-ros/\ngit checkout `git tag | sort -V | grep -P \"^\\d+\\.\\d+\\.\\d+\" | tail -1`\n# 更改cv_bridgeConfig.cmake中opencv4路径\nsudo gedit /opt/ros/melodic/share/cv_bridge/cmake/cv_bridgeConfig.cmake\n```\n\n如图\n\n![](https://cdn.jsdelivr.net/gh/reman2021/ImageHosting@main/zcw-blog-picture/img2.png)\n\n```shell\n# 编译\ncd ~/catkin_ws\ncatkin_make\n# 设置环境\necho \"source ~/catkin_ws/devel/setup.bash\">>~/.bashrc \nsource ~/.bashrc\n#试一下效果\nroslaunch realsense2_camera rs_t265.launch\n```\n\n#### 4.PX4配置\n\n下载*QGroundControl*\n\n[GitHub链接](https://github.com/mavlink/qgroundcontrol/releases/)\n\n[使用说明](https://docs.qgroundcontrol.com/master/en/)\n\n- `MAV_1_CONFIG`= `TELEM 2` \n- `MAV_1_MODE` = `Onboard`\n- `SER_TEL2_BAUD` = `57600 8N1`\n\n- `EKF2_AID_MASK` 勾选 `vision position fusion`和`vision yaw fusion`\n\n- `EKF2_HGT_MODE` 设置为 `Vision`\n- `MAV_ODOM_LP`设置为`1`\n\n #### 5.MAVROS 和VIO\n\n```shell\n# MAVROS\nsudo apt install python-catkin-tools\nsudo apt install ros-melodic-mavros ros-melodic-mavros-extras\nsudo apt-get install ros-indigo-mavros ros-indigo-mavros-extras ros‐indigo‐control‐toolbox\n# VIO\ncd ~/catkin_ws/src\ngit clone https://github.com/Auterion/VIO.git\ncd ..\ncatkin_make\n```\n\n更改以下配置\n\n1. T265相对位置及朝向\n\n```shell\ngedit ~/catkin_ws/src/VIO/launch/bridge.launch\n```\n\n修改\n\n```shell\n<node pkg=\"tf\" type=\"static_transform_publisher\" name=\"tf_baseLink_cameraPose\"args=\"0 0 0 0 1.5708 0 base_link camera_pose_frame 1000\"/>\n```\n\n`args`中\n\n- 开头三个参数为飞控中心指向T265中心的向量。例如T265在飞控前方10cm，上方4cm, 则前三个参数为：`[0.1, 0, -0.04]`\n\n- 中间三个参数为旋转角(偏航, 俯仰, 横滚)。默认T265朝地，则参数为`[0, 1.5708, 0]`；T265照射飞机机头方向，则参数为 `[0 0 0]`\n\n2. 如果TTL的速度异常\n\n```shell\nsudo gedit /opt/ros/melodic/share/mavros/launch/px4_config.yaml\n```\n\n第12行改为\n\n```shell\ntimesync_rate: 0.0\n```\n\n3. 如果使用USB连接\n\n```shell\nsudo gedit /opt/ros/melodic/share/mavros/launch/px4.launch\n```\n\n修改第5行为\n\n```SHELL\n<arg name=\"fcu_url\" default=\"/dev/ttyUSB0:57600\" />\n```\n\n\n\n```shell\ngedit ~/catkin_ws/src/VIO/launch/bridge_mavros.launch\n```\n\n修改第3行为\n\n```shell\n<arg name=\"fcu_url\" default=\"/dev/ttyUSB0:57600\" />\n```\n\n4. 放开串口权限\n\n```shell\n# 用你自己的用户名替代下面的<username>\nsudo usermod -a -G dialout <username>\n# 修改后需重启生效\nreboot now\n```\n\n#### 6.起飞前检查\n\n详情请看[官网说明](https://docs.px4.io/master/en/computer_vision/visual_inertial_odometry.html#verify_estimate)\n\n```shell\n# 开启VIO\nroslaunch px4_realsense_bridge bridge_mavros.launch\n```\n\n- 连接好摄像头、USB、PX4，可暂不接电池，查看MAVLink Inspector\n\n- 偏航机身，直到`ODOMETRY`消息的四元数非常接近单位四元数（w = 1，x = y = z = 0）\n\n- 向前移动无人机，x 坐标应增大\n- 向右移动无人机，y 坐标应增大\n\n- 向上移动无人机，z 坐标应减小\n\n- 遥控器切换到Position Flight Mode，若切换成功，应闪绿灯\n\n然后可以接上电池，尝试定点飞行\n\n#### 7.参考文章\n\n[PX4 User Guide](https://docs.px4.io/master/en/)\n\n[ROS Wiki](http://wiki.ros.org/)\n\n[Intel RealSense](https://github.com/IntelRealSense/)\n\n[ROS melodic kernel 4.18 安装 realsense D435i](https://lifuguan.github.io/d435i/ros/2019/05/28/realsense-melodic-installation/)\n\n[通过MAVROS连接机载电脑（NANO/TX2/NX）与Pixhawk](https://zhuanlan.zhihu.com/p/364390798)\n\n[Jetson Nano使用T265向PX4提供位置信息](https://zhuanlan.zhihu.com/p/367357019)\n\n[GitHub Proxy](https://ghproxy.com/)\n","tags":["PX4飞控"],"categories":["PX4"]},{"title":"数据结构与算法","url":"/2021/09/07/数据结构与算法/","content":"\n## 浅识数据结构与算法\n\n数据结构是讨论在非数值计算领域，如何将现实世界的问题转换为计算机语言的描述。\n\n### 讨论范畴\n\nData Structures（数据结构）+ Algorithm（算法）= Programs（程序）\n\n- 程序：计算机可以执行的一组指令集\n- 数据结构：问题的数学模型\n- 算法：解决问题的策略\n\n计算机的算法与数据结构密切相关，算法无不依赖于数据结构，而数据结构也关系到算法的效率，直接决定了一个程序的好坏。\n\n <!-- more -->\n\n### 数据与数据结构\n\n数据：指描述物理世界的数值、字符、图形图像、语音等所有能输入到计算机中并被计算机处理的符号集合。\n  \n数据结构：带结构的数据。即与特定问题相关的某一数据元素的集合和该集合中数据元素之间的关系。用来描述现实世界中的对象。\n  \n数据结构的逻辑表示：实现对物理世界的抽象和建模。分为线性结构、非线性结构（树形结构、图状结构、集合结构）。\n\n数据结构的物理存储表示：在计算机中的具体实现方式。数据元素的物理存储表示为二进制，数据元素之间关系的物理存储表示包括顺序存储和链式存储。\n\n### 数据类型\n\n#### 基本数据类型\n\n例如C语言提供的基本数据类型有：\n\n- 整型：int\n- 浮点型：float\n- 双精度型：double\n- 字符型：char\n- 逻辑型：bool\n\n注：不同数据类型，其取值的范围不同，所能进行的操作也不同。因此数据类型是一个值的集合和定义在此集合上的一组操作的总称。\n\n#### 抽象数据类型（ Abstract Data Type, ADT ）\n  \n抽象数据类型：  \n由用户定义，用以表示应用问题的**数据模型**以及定义在该模型上的**一组操作**，又称**数据抽象**。即一个抽象数据类型，其构成的两要素为**数据的结构**和**相应的操作集合**。 \n \n抽象数据类型可用（D，S，P）三元组表示，其中D 是数据对象； S 是 D 上的关系集； P 是对 D 的基本操作集。     \n抽象数据类型最重要的是其**抽象性质**，把使用和实现分离，实行**封装**和**信息隐藏**。它的实现就是面向对象程序设计中的**“类”**。  \n例，抽象数据类型复数 z=x+iy 的定义：\n\n``` c\ntypedef struct {\n\tfloat realpart；\n\tfloat imagpart；\n}complex；\n```\n\n再定义基本操作函数：\n\n``` c\nvoid Assign( complex &Z, float realval, float imagval )\t//构造实数z，其实部和虚部分别赋以参数realval和imagval\nfloat GetReal( cpmplex Z )\t\t\t\t\t\t\t\t//返回复数z的实部\nfloat Getimag( cpmplex Z )\t\t\t\t\t\t\t\t//返回复数z的虚部\nvoid add( complex z1, complex z2, complex &sum )\t\t//以sum返回两个复数z1和z2的和\n```\n\n### 算法与算法分析\n\n#### 算法特性\n\n算法是为了解决某类问题而规定的一个有限长的操作序列。一个算法必须满足以下五个重要特性：\n\n- 有穷性：一个算法必须总是在执行**有穷步之后结束**，且每一步都可在**有穷时间内完成**。   \n- 确定性：算法中每条指令必须有**确切的**含义。**在任何条件下，算法只有唯一的一条执行路径**，也即对相同的输入只能得出相同的输出。   \n- 可行性：算法中描述的操作都是可以通过已经实现的基本运算执行有限次来实现的。   \n- 有输入：：一个算法有零个或多个的输入，这些输入取自于某个特定的对象的集合。 实际问题中，有些输入是通过人机交互得到的。   \n- 有输出：一个算法有一个或多个输出，这些输出是同输入有着某些特定关系的量。  \n\n#### 算法设计的原则\n\n正确性：   \n算法应当满足具体问题的明确需求。\n\n- 程序不含语法错误，能正常运行。   \n- 程序对于常规的输入数据能够得到满足规格说明要求的结果。   \n- 程序对精心选择的，苛刻的数据输入能够得到满足要求的结果，特别是边界条件约束下的正确反馈。   \n- 程序对于一切合法的输入数据都能得到满足规格说明要求的结果。    \n\n可读性：  \n算法主要是为了人的阅读与交流，其次才是为计算机执行，因此算法应该易于人的理解；另一方面，晦涩难读的程序容易隐藏较多错误而难以调试。\n\n健壮性：   \n当输入的数据非法时，算法应当恰当地作出反映或进行相应处理，而不是产生莫名奇妙的输出结果。并且，处理出错的方法不应是中断程序的执行，而应是返回一个表示错误或错误性质的值，以便在更高的抽象层次上进行处理。\n\n高效率与低存储量需求：   \n通常，效率指的是算法执行时间；存储量指的是算法执行过程中所需的最大存储空间，两者都与问题的规模有关。\n\n#### 算法分析与度量\n\n衡量算法优劣的指标主要有两个：\n\n- 时间复杂度：根据算法写成的程序在执行时耗费时间的长度。\n- 空间复杂度：根据算法写成的程序在执行时占用存储单位的大小。\n\n##### 时间复杂度\n\n时间复杂度统计方法：\n\n- 事后统计法：存在两个问题  \n\t- 必须执行程序  \n\t- 其它因素如编程所用语言、编译程序产生的机器代码的质量、程序运行的硬件环境等掩盖算法本质  \n- 事前分析估算法  \n\t- 一个特定算法的“运行工作量”的大小，只依赖于问题的规模，通常用整数量 n 表示，或者说，它是问题规模的函数；  \n\t- 一般算法的执行时间与其包含的基本操作执行次数总和成正比；  \n\t- 算法中所包含的基本操作被执行的总次数可以作为算法运行时间的衡量标准。  \n\n<br>\n\n时间复杂度的表示：大 O 记法\n\n- 算法中所包含的基本操作被执行的总次数是问题规模 n 的函数，可以记做 f(n)。  \n- 随着问题规模 n 的增长，算法执行时间的增长率和 f(n) 的增长率相同，则可记作: **T(n) = O(f(n))**,称** T(n) 为算法的(渐近)时间复杂度**。  \n- T(n) 是一个粗略的**估计值**，f(n) 中的**低次项**以及**常数项**对算法执行时间的增长率**贡献较小**，因此可以忽略不计。   \n\n注：函数 T(n)=O(f(n)) 说明在趋向无穷的极限意义下，函数 T 的增长速度受到函数f的约束。\n\n<br>\n\n常见的时间复杂度:  \n\n- O(1) 或 O(c)：常量复杂度  \n- O(logn)：对数复杂度  \n- O(n)：线性复杂度  \n- O($n^2$)：平方复杂度  \n- O($2^n$)：指数复杂度  \n\n![时间复杂度随问题规模的变化趋势图](https://cdn.jsdelivr.net/gh/reman2021/ImageHosting@main/zcw-blog-picture/001%20%E7%BB%AA%E8%AE%BA.jpg)\n\n<br>\n\n时间复杂度:\n\n- 平均时间复杂度（θ）  \n- 最好情况下的时间复杂度（Ω）  \n- 最坏情况下的时间复杂度（O）  \n\n注：我们对算法时间复杂度的估算一般是**最坏情况下的时间复杂度（O）**。\n\n<br>\n\n时间复杂度分析   \n例1，两个矩阵相乘：\n\n``` c\nvoid mult(int a[],int b[],int& c[])\n{\n// 以二维数组存储矩阵元素，c 为 a 和 b 的乘积\n\tfor (i=1;i<=n;++i)\n\t\tfor (j=1;j<=n;++j) \n\t\t{\n\t\t\tc[i,j] = 0;\n\t\t\tfor (k=1;k<=n;++k)\n\t\t\t\tc[i,j] += a[i,k]*b[k,j];\n\t\t} //for\n} //mult\n```\n\n在忽略贡献较小**低次项**以及**常数项**后，可得出：   \n基本操作为乘法操作`a[i,k]*b[k,j]`，时间复杂度为 O($n^3$)\n\n例2，选择排序：  \n\n``` c\nvoid select_sort(int& a[],int n)\n{\n\tfor(i=0;i<n-1;i++)\n\t{\n\t\tp=i;\n\t\tfor(j=i+1;j<n;j++)\n\t\t\tif(a[j]<a[p])\n\t\t\t\tp=j;\n\t\tif(p!=i)\n\t\t\ta[i]<--->a[p];\n\t}\n} // select_sort\n```\n\n同样的，在忽略贡献较小**低次项**以及**常数项**后，可得出：   \n基本操作为比较操作`if(a[j]<a[p])`，时间复杂度为 O($n^2$)\n\n##### 空间复杂度\n\n算法的存储量包括：\n\n- 输入数据所占空间\n- 程序本身所占空间\n- 辅助变量所占空间\n\n注：\n\n1. 若输入数据所占空间只取决于问题本身，和算法无关，则只需要分析**除输入和程序之外的辅助变量所占额外空间**。   \n2. 若所需额外空间相对于输入数据量来说是常数，则称此算法为**原地工作**。如上述的选择排序算法便是原地工作。   \n3. 若所需存储量依赖于特定的输入，则通常**按最坏情况考虑**。  \n\n<br>\n\n空间复杂度：如果用 g(n) 表示算法所需的除了输入数据以外的额外的存储量，算法的空间复杂度定义为 **S(n)=O(g(n))** ，表示随着问题规模的增长，算法运行所需存储量的增长率与 g(n) 的增长率相同。\n\n## 线性表\n\n### 线性表的顺序存储——数组\n\n顺序表：  \n\n- 顺序表的定义：顺序表是用一组地址连续的存储空间依次存储线性表的数据元素  \n- 顺序表的特点：  \n\t- 各个数据元素的逻辑顺序与其存放的物理顺序一致  \n\t- 对顺序表中所有元素，既可以进行顺序依次访问，也可以进行随机直接访问  \n\t- 顺序表用一维数组实现时，存储空间可以是静态分配的，也可以是动态分配的  \n\t- 顺序表所能存放的数据元素个数受数组的空间大小约束  \n- 顺序表的三要素：  \n\t- 起始地址（常量）  \n\t- 顺序表长度（常量）  \n\t- 顺序表包含的有效元素个数（变量）  \n\n#### 顺序表的操作\n\n访问类操作：\n\n- 获取顺序表第i个数据元素（时间复杂度为 O(1)）  \n- 查找元素e所在的位置（时间复杂度为 O(n)）  \n\n加工类操作：\n\n- 在顺序表第i个位置插入元素e（时间复杂度为 O(n)）  \n- 将顺序表第i个位置上的元素删除（时间复杂度为 O(n)）  \n\n注：由于顺序表的顺序存储的特点，插入和删除都要通过移动来实现，这样做的弊端有二：\n\n- 所需要移动的元素很多，浪费算力。\n- 必须为数组开足够多的空间，否则有溢出风险。\n\n### 线性表的链式存储——链表\n\n#### 单链表\n\n单链表（single linked list）是一种最简单的链表表示，也叫做线性链表。单链表每个结点有两个域组成：数据域（data）存放数据元素；指针域（next）存放指向该链表中下一个结点的指针（后继结点的存储地址）。\n\n![](https://cdn.jsdelivr.net/gh/reman2021/ImageHosting@main/zcw-blog-picture/1560862292645286.png)\n![单链表](https://cdn.jsdelivr.net/gh/reman2021/ImageHosting@main/zcw-blog-picture/1560862411132172.png)\n\n##### 特点\n\n单链表的特点：\n\n- 单链表中数据元素的逻辑顺序与其物理存储顺序可能不一致，一般通过单链表的**指针**将各个数据元素按照线性表的逻辑顺序链接起来；\n- 单链表的**长度扩充较方便**；\n- 对单链表的访问操作只能**从头结点的指针开始**，逐个结点进行访问，不能像顺序表一样直接访问某个指定结点；\n- 当进行插入和删除操作时，只需修改相关结点的指针域即可，**不需要移动**其他元素的存储位置；\n- 由于单链表的每个结点带有指针域，因此存储空间消耗要比顺序表大。\n\n##### 存储结构\n\n单链表的存储结构：\n\n``` c\nTypedef struct Node\n{\n\tElemType data; \t\t// 数据域，ElemType为你想定义的任意数据类型，包括结构体struct等复合类型\n\tstruct Lnode *next; // 指针域\n}Node, *LinkList;\n```\n##### 基本操作\n\n单链表的基本操作：\n\n``` c\nGetElem(L, i, e) \t\t//取第i个数据元素\nListInsert(&L, i, e) \t//插入数据元素\nListDelete(&L, i, e) \t//删除数据元素\nDestroyList(&L) \t\t//销毁单链表\nCreateList(&L, n) \t\t//创建单链表\n```\n","tags":["数据结构"],"categories":["程序设计"]},{"title":"Markdown语法详解（基于MarkdownPad2）","url":"/2021/08/19/Markdown语法详解/","content":"Markdown 是一种轻量级的标记语言，可用于在纯文本文档中添加格式化元素。Markdown 由 John Gruber 于 2004 年创建，如今已成为世界上最受欢迎的标记语言之一。\n\n<!-- more -->\n\n## Markdown简介\n\nMarkdown 是一种轻量级标记语言，排版语法简洁，让人们更多地关注内容本身而非排版。它使用易读易写的纯文本格式编写文档，可与 HTML 混编，可导出 HTML、PDF 以及本身的 .md 格式的文件。且 Markdown 的语法十分简单，常用的标记符号不超过十个，用于日常写作记录绰绰有余，不到半小时就能完全掌握。但就是这十个不到的标记符号，却能让人优雅地沉浸式记录，专注内容而不是纠结排版，达到「心中无尘，码字入神」的境界。\n\n## Markdown基本语法速查表\n\n这些是 John Gruber 的原始设计文档中列出的元素。所有 Markdown 应用程序都支持这些元素。\n\n| 元素 | Markdown语法 | MarkdownPad2快捷键 |\n| :---: | :---------: | :---------------: |\n| 标题（Heading）| `# H` | `Ctrl+1` |\n| 粗体（Bold）| `**bold text**` | `Ctrl+B` |\n| 斜体（Italic）| `*italicized text*` | `Ctrl+I` |\n| 引用块（Blockquote）| `> blockquote` | `Ctrl+Q` |\n| 有序列表（Ordered List）| `1. First item` | `Ctrl+Shift+O` |\n| 无序列表（Unordered List）| `- First item` | `Ctrl+U` |\n| 代码（Code）| `` `code` ``| `Ctrl+K` |\n| 分隔线（Horizontal Rule）| `---` | `Ctrl+R` |\n| 链接（Link）| `[title](https://www.example.com)` | `Ctrl+L` |\n| 图片（Image）|\t`![alt text](image.jpg)`| `Ctrl+G` |\n\n## 基本语法\n\n### 标题（Heading）\n\n创建标题：在单词或短语前面添加井号 (#) 。# 的数量代表了标题的级别。例如，添加三个 # 表示创建一个三级标题 (`<h3>`)：\n\t`### My Header`\n**注意用一个空格在 # 和标题之间进行分隔。**\n\n标题的Markdown语法与HTML的对应关系如下：\n\n| Markdown语法 | HTML |\n| :----------: | :---: |\n| `# Heading level 1` | `<h1>Heading level 1</h1>` |\n| `## Heading level 2` | `<h2>Heading level 2</h2>` |\n| `### Heading level 3` | `<h3>Heading level 3</h3>` |\n\n注：最多只能添加六个 # ，即只能到六级标题，无七级标题。\n\n也可以在文本下方添加任意数量的 == 号来标识一级标题，或者 -- 号来标识二级标题。   \n一级标题：  \n\t`Heading level 1`\n\t`===============`\n二级标题：  \n\t`Heading level 2`\n\t`---------------`\n\n### 段落（Paragraph）\n\n创建段落：使用空白行将一行或多行文本进行分隔。**注意不要用空格（spaces）或制表符（ tabs）缩进段落。**     \n实现效果如下：  \n\nI really like using Markdown.\n\nI think I'll use it to format all of my documents from now on\n\n### 换行（Line Break）\n\n在一行的末尾添加两个或多个空格，然后按回车键,即可换行(`<br>`)。    \n几乎每个 Markdown 应用程序都支持两个或多个空格进行换行，称为*结尾空格（trailing whitespace)* ，但因为很难在编辑器中直接看到空格所以颇有争议，且很多人都会有意或无意地在每个句子后面添加两个空格。因此，我们可以使用另一种换行方式：HTML 的`<br>`标签。   \n其实还有还有两种其他方式，但是为了确保兼容性，建议就使用行尾添加“结尾空格”或 HTML 的`<br>`标签的方式来实现换行。  \n\n### 强调语法：粗体（Bold）、斜体（Italic）\n\n#### 粗体（Bold）\n\n加粗文本：在单词或短语的前后各添加两个星号（asterisks）或下划线（underscores）。  \n加粗一个单词或短语的中间部分：在要加粗部分的两侧各添加两个星号（asterisks）。\n\n如下表：\n\n| Markdown语法 | HTML | 效果 |\n| :----------: | :---: | :---:|\n| `I love **bold text**.` | `I love <strong>bold text</strong>.` | I love **bold text**. |\n| `I love __bold text__ .` | `I love <strong>bold text</strong>.` | I love __bold text__. |\n| `tobe**or**nottobe` | `tobe<strong>or</strong>nottobe` | tobe**or**nottobe |\n\n#### 斜体（Italic）\n\n斜体显示文本：在单词或短语前后添加一个星号（asterisk）或下划线（underscore）。  \n斜体突出单词的中间部分：在字母前后各添加一个星号，中间不要带空格。\n\n如下表：\n\n| Markdown语法 | HTML | 效果 |\n| :----------: | :---: | :---:|\n| `Italicized text is the *cat's meow*.` | `Italicized text is the <em>cat's meow</em>.` | Italicized text is the *cat's meow*. |\n| `Italicized text is the _cat's meow_.` | `Italicized text is the <em>cat's meow</em>.` | Italicized text is the _cat's meow_. |\n| `*tobe*or*nottobe*` | `<em>tobe</em>or<em>nottobe</em>` | *tobe*or*nottobe* |\n\n#### 粗体（Bold）& 斜体（Italic）\n\n要让文本又粗又斜，只需在单词或短语的前后各添加三个星号或下划线。要加粗并用斜体显示单词或短语的中间部分，则在要突出显示的部分前后各添加三个星号，中间不要带空格。\n\n如下表：\n\n| Markdown语法 | HTML | 效果 |\n| :----------: | :---: | :---:|\n| `This text is ***really important***.` | `This text is <strong><em>really important</em></strong>.` | This text is ***really important***. |\n| `This text is ___really important___.` | `This text is <strong><em>really important</em></strong>.` | This text is ___really important___. |\n| `This text is __*really important*__.` | `This text is <strong><em>really important</em></strong>.` | This text is __*really important*__. |\n| `This text is **_really important_**.` | `This text is <strong><em>really important</em></strong>.` | This text is **_really important_**. |\n| `This text is very***very***important.` | `This text is very<strong><em>very</em></strong>important.` | This text is very***very***important. |\n\n### 引用块（Blockquote）\n\n#### 单段落\n\n创建引用块：在段落前添加一个 > 符号。\n```\n\t> To be or not to be\n\t\n```\n渲染效果如下：\n\n> To be or not to be\n\n#### 多段落\n\n创建多个段落的块引用：除了在段落前添加一个 > 符号，还要在段落之间的空白行添加一个 > 符号  \n```\n\t> \"Il n'ya qu'un héroïsme au monde : c'est de voir le monde tel qu'il est et de l'aimer.\"\n\t> \n\t>  Romain Rolland\n```\n\n渲染效果如下：\n\n> \"Il n'ya qu'un héroïsme au monde : c'est de voir le monde tel qu'il est et de l'aimer.\"\n> \n>  Romain Rolland\n\n#### 嵌套\n\n引用还可以嵌套：在要嵌套的段落前添加一个 >> 符号即可。\n```\n\t> Romain Rolland\n\t>>  \"Il n'ya qu'un héroïsme au monde : c'est de voir le monde tel qu'il est et de l'aimer.\" \n```\n\n渲染效果如下：\n\n> Romain Rolland\n>>  \"Il n'ya qu'un héroïsme au monde : c'est de voir le monde tel qu'il est et de l'aimer.\" \n\n#### 带有其它元素的块引用\n\n块引用可以包含其他 Markdown 格式的元素。并非所有元素都能生效，可以自行实验哪些元素有效。  \n例如：\n```\n\t> #### The quarterly results look great!\n\t>\n\t> - Revenue was off the chart.\n\t> - Profits were higher than ever.\n\t>\n\t>  *Everything* is going according to **plan**.\n```\n\n效果如下：\n> #### The quarterly results look great!\n>\n> - Revenue was off the chart.\n> - Profits were higher than ever.\n>\n>  *Everything* is going according to **plan**.\n\n**注：引用块最好与上下文各隔一个空行**\n\n### 列表（List） \n\n列表包括有序列表和无序列表。\n\n#### 有序列表\n\n创建有序列表：在每个列表项前添加数字并紧跟一个英文句点和**空格**。数字无须按数学顺序排列，但是应当以数字 1 起始。   \n例如下面三个有序列表是等价的：\n```\n\t1. First item\n\t2. Second item\n\t3. Third item\n\t4. Fourth item\n```\n```\n\t1. First item\n\t8. Second item\n\t3. Third item\n\t5. Fourth item\n```\n```\n\t1. First item\n\t1. Second item\n\t1. Third item\n\t1. Fourth item\n```\n\n效果如下：\n1. First item\n1. Second item\n1. Third item\n1. Fourth item\n\n有序列表可进行嵌套：\n```\n\t1. First item\n\t2. Second item\n\t3. Third item\n\t    1. Indented item\n\t    2. Indented item\n\t4. Fourth item\n```\n\n效果如下：\n1. First item\n2. Second item\n3. Third item\n    1. Indented item\n    2. Indented item\n4. Fourth item\n\n#### 无序列表\n要创建无序列表，请在每个列表项前面添加破折号 (-)、星号 (*) 或加号 (+) ，同时不要忘记加上空格。   \n如下三个无序列表也是等价的：\n```\n\t- First item\n\t- Second item\n\t- Third item\n\t- Fourth item\n```\n```\n\t* First item\n\t* Second item\n\t* Third item\n\t* Fourth item\n```\n```\n\t+ First item\n\t+ Second item\n\t+ Third item\n\t+ Fourth item\n```\n\n效果如下：\n+ First item\n+ Second item\n+ Third item\n+ Fourth item\n\n无序列表同样可进行嵌套：\n```\n\t- First item\n\t- Second item\n\t- Third item\n\t    - Indented item\n\t    - Indented item\n\t- Fourth item\n```\n\n效果：\n- First item\n- Second item\n- Third item\n    - Indented item\n    - Indented item\n- Fourth item\n\n#### 在列表中嵌套其他元素\n\n要在保留列表连续性的同时添加其他元素，要将该元素缩进四个空格或一个制表符（Tab），如下所示：\n\n##### 段落\n\n```\n\t*   This is the first list item.\n\t*   Here's the second list item.\n\t\n\t    I need to add another paragraph below the second list item.\n\t\n\t*   And here's the third list item.\n```\n\n渲染效果如下：\n*   This is the first list item.\n*   Here's the second list item.\n\n    I need to add another paragraph below the second list item.\n\n*   And here's the third list item.\n\n##### 引用块\n\n```\n\t*   This is the first list item.\n\t*   Here's the second list item.\n\t\n\t    > A blockquote would look great below the second list item.\n\t\n\t*   And here's the third list item.\n```\n\n渲染效果如下：\n*   This is the first list item.\n*   Here's the second list item.\n\n    > A blockquote would look great below the second list item.\n\n*   And here's the third list item.\n\n##### 代码块\n\n代码块通常采用四个空格或一个制表符缩进。当把它们被放入列表中，则要将它们缩进八个空格或两个制表符。\n```\n\t1.  Open the file.\n\t2.  Find the following code block on line 21:\n\t\n\t        <html>\n\t          <head>\n\t            <title>Test</title>\n\t          </head>\n\t\n\t3.  Update the title to match the name of your website.\n```\n\n渲染效果如下：\n1.  Open the file.\n2.  Find the following code block on line 21:\n\n        <html>\n          <head>\n            <title>Test</title>\n          </head>\n\n3.  Update the title to match the name of your website.\n\n##### 图片\n\n```\n\t1.  Open the file containing the Linux mascot.\n\t2.  Marvel at its beauty.\n\t\n\t    ![](https://cdn.jsdelivr.net/gh/reman2021/ImageHosting@main/zcw-blog-picture/linux.png)\n\t\n\t3.  Close the file.\n```\n\n渲染效果如下：\n1.  Open the file containing the Linux mascot.\n2.  Marvel at its beauty.\n\n    ![](https://cdn.jsdelivr.net/gh/reman2021/ImageHosting@main/zcw-blog-picture/linux.png)\n\n3.  Close the file.\n\n##### 列表\n\n```\n\t1. First item\n\t2. Second item\n\t3. Third item\n\t    - Indented item\n\t    - Indented item\n\t4. Fourth item\n```\n\n渲染效果如下：\n1. First item\n2. Second item\n3. Third item\n    - Indented item\n    - Indented item\n4. Fourth item\n\n### 代码\n\n将代码放在在反引号 (`` ` ``) 中，如果代码包含一个或多个反引号，则将其包裹在双反引号中：\n\n| Markdown语法 | HTML | 效果 |\n| :----------: | :---: | :---:|\n| ``At the command prompt, type `nano`.`` | `At the command prompt, type <code>nano</code>.\t` | At the command prompt, type `nano`. |\n| ``` ``Use `code` in your Markdown file.`` ``` | ``<code>Use `code` in your Markdown file.</code>`` | ``Use `code` in your Markdown file.`` |\n\n**代码块**  \n创建代码块：将代码块的每一行缩进至少四个空格或一个制表符，效果如下：\n\n\t<html>\n\t  <head>\n\t  </head>\n\t</html>\n\n个人觉得不如围栏代码块好看，且不用缩进，在拓展语法中会讲到。\n\n### 分隔线（Horizontal Rule）\n\n创建分隔线：在单独一行上使用三个及三个以上星号 (***)、破折号 (---) 或下划线 (___) 且不包含其他内容：\n```\n\t***\n\t\n\t---\n\t\n\t_________________\n```\n\n渲染效果：\n\n***\n\n**注意在分隔线的前后均添加空白行**\n\n### 链接（Link）\n\n#### 超链接\n\n超链接Markdown语法：`[超链接显示名](超链接地址 \"超链接title\")`\n对应的HTML代码：`<a href=\"超链接地址\" title=\"超链接title\">超链接显示名</a>`   \n链接title是当鼠标悬停在链接上时会出现的文字，可以自行修改，它放在圆括号中链接地址的后面，跟链接地址之间以空格分隔。    \n例如：\n```\n\t我的博客链接：[ZCW_Blog](http://zcw-blog.top \"不来看看吗\")\n```\n\n渲染效果如下：   \n我的博客链接：[ZCW_Blog](http://zcw-blog.top \"不来看看吗\")\n\n#### 超链接居中\n\nMarkdown 本身并没有居中语法，不过我们可以利用 HTML 语法来实现超链接居中，只需将超链接放在`<center></center>`之间，需要注意的是在 MarkdownPad2 中要将链接与`<center></center>`各隔一个空行，否则链接会失效。   \n例如：\n```\n<center>\n\n[ZCW_Blog](http://zcw-blog.top \"不来看看吗\")\n\n</center>\n```\n效果如下：\n<center>\n\n[ZCW_Blog](http://zcw-blog.top \"不来看看吗\")\n\n</center>\n\n#### 网址和 Email 地址\n\n使用尖括号可以把 URL 或者 email 地址变成可点击的链接：\n```\n\t<http://zcw-blog.top>\n\t<a@example.com>\n```\n\n#### 带格式化的链接\n\n强调链接：在链接语法前后增加星号（*）。    \n将链接表示为代码：在方括号中添加反引号（`）。\n```\n\t我的博客链接： **[ZCW_Blog](http://zcw-blog.top \"不来看看吗\")**\n\t我的博客链接： *[ZCW_Blog](http://zcw-blog.top \"不来看看吗\")*\n\t我的博客链接：[`ZCW_Blog`](http://zcw-blog.top \"不来看看吗\")\n```\n\n渲染效果如下：   \n我的博客链接： **[ZCW_Blog](http://zcw-blog.top \"不来看看吗\")**   \n我的博客链接： *[ZCW_Blog](http://zcw-blog.top \"不来看看吗\")*   \n我的博客链接：[`ZCW_Blog`](http://zcw-blog.top \"不来看看吗\")\n\n### 引用链接\n\n引用样式链接是一种特殊的链接,作用是使 URL 在 Markdown 中更易于显示和阅读，它分为两个部分：\n\n**第一部分**\n\n使用两组括号进行格式设置。第一组方括号内显示为链接的文本。第二组括号包含一个标签，该标签用于指向存储在文档其他位置的链接。\n```\n\t[ZCW_Blog1][1]\n\t[ZCW_Blog2][2]\n\t[ZCW_Blog3][3]\n```\n\n**第二部分**\n\n第二部分使用以下属性设置格式：  \n1. 放在括号中的标签，其后紧跟一个冒号和至少一个空格（例如[label]:）。   \n2. 链接的 URL ，可以选择将其括在尖括号中。   \n3. 链接的可选标题，可以将其括在双引号，单引号或括号中。   \n如下：\n```\n\t[1]: http://zcw-blog.top \"不来看看吗\"\n\t[2]: <http://zcw-blog.top> '来看看吧'\n\t[3]: http://zcw-blog.top （快来看！）\n```\n\n然后将以上标签放在文章的任意位置，如文末，这样在 Markdown 编辑文章的时候链接的显示就会变得更加简洁。    \n渲染效果如下：\n[ZCW_Blog1][1]    \n[ZCW_Blog2][2]     \n[ZCW_Blog3][3]    \n\n[1]: http://zcw-blog.top \"不来看看吗\"\n[2]: http://zcw-blog.top \"来看看吧\"\n[3]: http://zcw-blog.top \"快来看！\"\n\n### 图片（Image）\n\n插入图片 Markdown 语法：`![图片alt](图片链接或路径 \"图片title\")`    \n对应的HTML代码：`<img src=\"图片链接或路径\" alt=\"图片alt\" title=\"图片title\">`    \n插入图片建议使用图床生成图片链接，再直接复制粘贴即可。    \n我使用的是 Github + jsDelivr + PicGo 搭建的免费图床，详情可见\n\n### 转义字符语法\n\n如果要显示原本用于格式化 Markdown 文档的字符，请在字符前面添加反斜杠字符 (\\) 。    \n以下列出的字符都可以通过使用反斜杠字符进行转义：\n\n| Character | Name |\n| :----------: | :---: |\n| \\ | backslash |\n| ` | backtick |\n| * | asterisk |\n| _ | underscore |\n| {} | curly braces |\n| [] | brackets |\n| () | parentheses |\n| # | pound sign |\n| + | plus sign |\n| - | minus sign (hyphen) |\n| . | dot |\n| ! | exclamation mark |\n| | | pipe |\n\n\n文章编辑常用的基本语法差不多就以上这些，掌握之后就可以开始创作啦。\n如果想了解拓展语法可以接着往下看：\n\n## 拓展语法\n\n注意免费版 MarkdownPads2 是不支持拓展语法的，需要升级为 Markdown（Extra），详见[在Hexo博客上进行创作](http://zcw-blog.top/2021/08/17/%E5%9C%A8hexo%E5%8D%9A%E5%AE%A2%E4%B8%8A%E8%BF%9B%E8%A1%8C%E5%88%9B%E4%BD%9C/#more \"就在-安装Markdown编辑器-部分哦\")。拓展语法没有相应快捷键哦。\n\n### 表格\n\n添加表格：使用三个或多个连字符（---）创建每列的标题，并使用管道（|）分隔每列。\n```\n\t| Syntax      | Description |\n\t| ----------- | ----------- |\n\t| Header      | Title       |\n\t| Paragraph   | Text        |\n```\n\n呈现的输出如下所示：\n\n| Syntax      | Description |\n| ----------- | ----------- |\n| Header      | Title       |\n| Paragraph   | Text        |\n\n单元格宽度可以变化，但是呈现的输出不变：\n```\n\t| Syntax | Description |\n\t| --- | ----------- |\n\t| Header | Title |\n\t| Paragraph | Text |\n```\n\n| Syntax | Description |\n| --- | ----------- |\n| Header | Title |\n| Paragraph | Text |\n\n*Tip: 使用连字符和管道创建表可能很麻烦。可以尝试使用[Markdown Tables Generator](https://www.tablesgenerator.com/markdown_tables)，通过图形界面构建表格，然后将生成的 Markdown 格式的文本复制到文件中。*\n\n#### 对齐\n\n可以通过在标题行中的连字符的左侧，右侧或两侧添加冒号（:），将列中的文本对齐到左侧，右侧或中心。\n```\n\t| Syntax      | Description | Test Text     |\n\t| :---        |    :----:   |          ---: |\n\t| Header      | Title       | Here's this   |\n\t| Paragraph   | Text        | And more      |\n```\n\n呈现的输出如下所示：\n\n| Syntax      | Description | Test Text     |\n| :---        |    :----:   |          ---: |\n| Header      | Title       | Here's this   |\n| Paragraph   | Text        | And more      |\n\n#### 表格中可使用的文本格式\n\n可以添加链接，代码（仅反引号（`）中的单词或短语，而不是代码块）和强调，但不能添加标题，块引用，列表，水平规则，图像或 HTML 标签。\n\n#### 合并单元格\n\nMarkdown 并没有合并单元格的相关语法，但是 Markdown 是兼容 HTML 的，因此可以通过 HTML 的方式实现单元格合并。相关内容可以参考[Markdown表格合并单元格](https://blog.csdn.net/qq_32042527/article/details/88084130)，于此不再赘述。\n\n### 围栏代码块\n\n创建围栏代码块：在代码块之前和之后的行上使用三个反引号（```）或三个波浪号（~~~）。\n```` \n```\n\t{\n\t  \"firstName\": \"John\",\n\t  \"lastName\": \"Smith\",\n\t  \"age\": 25\n\t}\n``` \n````\n\n呈现的输出如下所示：\n```\n\t{\n\t  \"firstName\": \"John\",\n\t  \"lastName\": \"Smith\",\n\t  \"age\": 25\n\t}\n```\n要在代码块中显示反引号，只需要用更多的反引号包裹就好了，跟套娃一样，例如：\n`````\n```` \n```\n\t{\n\t  \"firstName\": \"John\",\n\t  \"lastName\": \"Smith\",\n\t  \"age\": 25\n\t}\n``` \n````\n`````\n呈现的输出就是这样：\n```` \n```\n\t{\n\t  \"firstName\": \"John\",\n\t  \"lastName\": \"Smith\",\n\t  \"age\": 25\n\t}\n``` \n````\n\n#### 语法高亮\n\n使用此功能可以为编写代码的任何语言添加颜色突出显示，只要在受防护的代码块之前的反引号旁边指定一种语言即可。\n````\n``` json\n\t{\n\t  \"firstName\": \"John\",\n\t  \"lastName\": \"Smith\",\n\t  \"age\": 25\n\t}\n```\n````\n呈现的输出如下所示：\n```json\n{\n  \"firstName\": \"John\",\n  \"lastName\": \"Smith\",\n  \"age\": 25\n}\n```\n\n### 删除线\n\n删除线功能可以指示某些错误。在要删除的词语前后使用两个波浪号（~）即可，如下：\n```\n\t~~地球是方的。~~地球是圆的。\n```\n~~地球是方的。~~地球是圆的。\n\n### 任务列表\n\n创建任务列表：在任务列表项之前添加破折号（-）和方括号，注意 - 和 [ ] 之间要加上空格，如下：\n```\n\t- [x] Write the press release\n\t- [ ] Update the website\n\t- [ ] Contact the media\n```\n\n- [x] Write the press release\n- [ ] Update the website\n- [ ] Contact the media\n\n###  使用 Emoji 表情\n\n有两种方法将表情符号添加到Markdown文件中：将表情符号复制并粘贴到 Markdown 格式的文本中，或者键入 emoji shortcodes（表情简码）。我在MarkdownPad2 上使用表情简码没有成功，应该是不支持，所以只能使用复制粘贴的方法。\n\n#### 复制和粘贴表情符号\n\n大多数情况下可以简单地从[Emojipedia](https://emojipedia.org/) 等来源复制表情符号并粘贴到文档中。 Markdown 编辑器会自动以 Markdown 格式的文本显示表情符号💡。\n\n### 自动网址链接\n\nMarkdownPad2 会自动将 URL 转换为链接。也就是说如果输入 http://www.example.com ，即使未使用方括号，MarkdownPad2 也会自动将其转换为链接。   \n如果不希望 MarkdownPad2 自动链接 URL ，则可以通过将 URL 表示为带反引号的代码来删除该链接。\n\n## 常用技巧\n\n这里主要是利用 Markdown 支持基本的 HTML 语法的特性，满足一些编辑排版的需要。\n\n### 居中、左对齐、右对齐\n\n在超链接居中部分已经提及，Markdown 本身并没有居中语法，但我们可以使用 HTML 语法来实现居中、左对齐和右对齐。   \n示例如下：\n```\n<center>居中</center>\n<p align=\"left\">左对齐</p>\n<p align=\"right\">右对齐</p>\n```\n实现效果：\n<center>居中</center>\n<p align=\"left\">左对齐</p>\n<p align=\"right\">右对齐</p>\n\n## 高级技巧\n\n### 显示数学公式\n\n在MarkdownPad 2中自定义头文件,依次点击 Tools > Option > Advanced > HTML Head Editor ，添加如下代码：   \n```html\n<script type=\"text/x-mathjax-config\">\n  MathJax.Hub.Config({\n    extensions: [\"tex2jax.js\"],\n    jax: [\"input/TeX\", \"output/HTML-CSS\"],\n    tex2jax: {\n      inlineMath: [ ['$','$'], [\"\\\\(\",\"\\\\)\"] ],\n      displayMath: [ ['$$','$$'], [\"\\\\[\",\"\\\\]\"] ],\n      processEscapes: true\n    },\n    \"HTML-CSS\": { fonts: [\"TeX\"] }\n  });\n</script>\n<script type=\"text/javascript\" src=\"https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML\">\n</script>\n\n```\n如图\n![](https://cdn.jsdelivr.net/gh/reman2021/ImageHosting/zcw-blog-pictureSnipaste_2022-04-24_17-23-10.png)\n再在 md 文件里添加如下代码进行测试：   \n\n```mathjax\nWhen $( a \\ne 0 )$, there are two solutions to $(ax^2 + bx + c = 0)$ and they are:\n$$ x = {-b \\pm \\sqrt{b^2-4ac} \\over 2a} $$\n\t\n$$\n\\begin{aligned}\n\\dot{x} & = \\sigma(y-x) \\\\\n\\dot{y} & = \\rho x - y - xz \\\\\n\\dot{z} & = -\\beta z + xy\n\\end{aligned}\n$$\n\n```\n按F6查看结果如下：\n![](https://cdn.jsdelivr.net/gh/reman2021/ImageHosting/zcw-blog-pictureSnipaste_2022-04-24_17-29-11.png)\n\n---\n\n自此，有关 Markdown 语法的学习就暂时告一段落啦，现在就将所学用于实践，去编辑你的第一个 Markdown 文件吧。你也可以在[Markdown 在线编辑器](https://markdown.com.cn/editor/)上小试牛刀。   \n如果要让你的 Markdown 文件更加易读，改善你的排版，让你的网页更有气质，可以学习 Markdown 的一些编写规范：[Markdown 编写规范](https://github.com/sparanoid/chinese-copywriting-guidelines)\n\n## 参考文章\n[Markdown 语法教程](https://markdown.com.cn/)","tags":["Markdown"]},{"title":"在Hexo博客上进行创作","url":"/2021/08/17/在hexo博客上进行创作/","content":"本文主要介绍如何在Hexo博客上进行创作，包括新建、编辑和预览文章\n\n<!-- more -->\n\n## 安装Markdown编辑器\n\n要进行创作，首先必须要有相应的文本编辑器。   \n只要安装了相应的渲染插件，Hexo 支持以任何格式书写文章。   \n例如，Hexo 默认安装了 hexo-renderer-marked 和 hexo-renderer-ejs，因此你可以用 Markdown 写作，也可以用 EJS 写作。如果安装了 hexo-renderer-pug ，甚至可以用 Pug 模板语言书写文章。只需要将文章的扩展名从 md 改成 ejs，Hexo 就会使用 hexo-renderer-ejs 渲染这个文件，其他格式同理。     \n我使用的是 Markdown 编辑器来编辑文章，可以参考[几款主流好用的markdown编辑器介绍](https://blog.csdn.net/davidhzq/article/details/100815332)一文，选择喜欢的 markdown 编辑器。    \n我选的是MarkdownPad2，附上下载地址：[The Markdown Editor for Windows](http://www.markdownpad.com/)，按默认进行安装即可。  如果是win10系统还需要安装一个组件 awesomium_v1.6.6_sdk_win：\n百度网盘链接：https://pan.baidu.com/s/1UJRtOBF8vj19ikOq4452sQ ，提取码：yd8k   \n下载后也是默认安装即可    \n若要使用 Markdown（Extra）则需要付费（破解），现将目前亲测有效的 Key 粘贴如下：   \nEmail address：\n    `Soar360@live.com`    \nLicense Key：\n```\n\tGBPduHjWfJU1mZqcPM3BikjYKF6xKhlKIys3i1MU2eJHqWGImDHzWdD6xhMNLGVpbP2M5SN6bnxn2kSE8qHqNY5QaaRxmO3YSMHxlv2EYpjdwLcPwfeTG7kUdnhKE0vVy4RidP6Y2wZ0q74f47fzsZo45JE2hfQBFi2O9Jldjp1mW8HUpTtLA2a5/sQytXJUQl/QKO0jUQY4pa5CCx20sV1ClOTZtAGngSOJtIOFXK599sBr5aIEFyH0K7H4BoNMiiDMnxt1rD8Vb/ikJdhGMMQr0R4B+L3nWU97eaVPTRKfWGDE8/eAgKzpGwrQQoDh+nzX1xoVQ8NAuH+s4UcSeQ==\n```\n点击 Markdown 左下角图标选择 Markdown（Extra），将上面的邮箱和授权秘钥填入：\n![](https://cdn.jsdelivr.net/gh/reman2021/ImageHosting@main/zcw-blog-picture/2021-08-18%2011-03-56-50.png)\n![](https://cdn.jsdelivr.net/gh/reman2021/ImageHosting@main/zcw-blog-picture/5494434-5949697f2f2ba48c.jpg)\n然后就破解成功啦。\n\n## 新建文章\n\n可以在根目录Blog打开Git Bash，使用命令行新建文章：  \n\t`hexo new [layout] <title>`或`hexo n [layout] title`    \nlayout 是文章的布局，默认为post。    \ntitle 是文章的标题，也是md文件的名字。\n\n### 布局\n\nHexo有三种布局，分别是 post, page 和 draft。三种布局对应的路径如下：  \n\n| Layout      | Path           |\n| ----------- | -------------- |\n| post        | source/_posts  |\n| page        | source         |\n| draft       | source/_drafts |\n\n在博客目录下输入以下命令时，会默认使用post布局，然后自动在source\\_posts目录生成一个text.md文件：   \n    `$ hexo n text`   \n也可以使用如下命令创建了一个指定布局的名为demo的文章：   \n\t`$ hexo n [layout] demo`   \n\n### 文件名称\n\nHexo 默认以标题做为文件名称，但可以在根目录 Blog 下的_config.yml（称为**站点配置文件**）编辑 new_post_name 参数来改变默认的文件名称。例如可以设为 :year-:month-:day-:title.md 以方便通过日期来管理文章。   \n有关变量和定义如下：\n\n| 变量        | 描述            |\n| ----------- | -------------- |\n| :title | 标题（小写，空格将会被替换为短杠） |\n| :year | 建立的年份，比如， 2015 |\n| :month | 建立的月份（有前导零），比如， 04 |\n| :i_month | 建立的月份（无前导零），比如， 4 |\n| :day | 建立的日期（有前导零），比如， 07 |\n| :i_day | 建立的日期（无前导零），比如， 7 |\n\n### 草稿\n\n刚刚提到了 Hexo 的一种特殊布局：draft，这种布局在建立时会被保存到 source/_drafts 文件夹，可通过如下的 publish 命令将草稿移动到 source/_posts 文件夹，该命令的使用方式与 new 十分类似，也可在命令中指定 layout 来指定布局。   \n\t`$ hexo publish [layout] <title>`   \n草稿默认不会显示在页面中，可以使用`hexo --draft`命令可以查看已有草稿，或是在**站点配置文件**中把 render_drafts 参数设为 true 来预览草稿。\n\n### Front-matter\n \n打开 md 文件，可以看到文件最上方以 --- 分隔的区域，这块区域叫做 Front-matter ，用于指定个别文件的变量，举例来说：   \n```\n\t---\n\ttitle: Hello World\n\tdate: 2013/7/13 20:46:25\n\ttags: Hello\n\t---\n```\n以下是一些预先定义的参数:   \n\n| 参数 | 描述 | 默认值 |\n| ---- | -------- | -------- |\n| layout | 布局 | config.default_layout |\n| title | 标题 | 文章文件名 |\n| date | 建立日期 | 文件建立日期 |\n| updated | 更新日期 | 文件更新日期 |\n| comments | 开启文章评论 | true |\n| tags | 标签 |\n| categories | 分类 |\n| permalink | 覆盖文章网址 |\n\n### 模版（Scaffold）\n\n在新建文章时，Hexo 会根据 scaffolds 文件夹内相对应的文件来建立文件，例如：   \n    `$ hexo new photo \"My Gallery\"`    \n在执行这行指令时，Hexo 会尝试在 scaffolds 文件夹中寻找 photo.md，并以其内容作为模板建立文章，因而你可以在 scaffolds 文件夹中建立md文件形成自己的模板，应注意模板文件里面应只有 Front-matter。    \n上文中Front-matter的参数都是模版中可以使用的变量。   \n\n### 分类和标签\n\n只有文章支持分类和标签，可以在 Front-matter 中进行设置。例如：\n```\n\tcategories:\n\t- Diary\n\ttags:\n\t- PS5\n\t- Games\n```\n在其他系统中，分类和标签听起来很接近，但是在 Hexo 中两者有着明显的差别：分类具有顺序性和层次性，也就是说 Foo, Bar 不等于 Bar, Foo；而标签则没有顺序和层次。     \n例如：\n```\n\tcategories:\n\t- Diary\n\t- Life\n\ttags:\n\t- PS5\n\t- Games\n```\n会使分类 Life 成为 Diary 的子分类，而不是并列分类，但是标签 PS5 和 Games 则是并列关系，因此有必要为文章选择尽可能准确的分类。     \n如果需要为文章添加多个分类，可以尝试以下方法：  \n```\n\tcategories:\n\t- [Diary, PlayStation]\n\t- [Diary, Games]\n\t- [Life]\n```\n此时这篇文章同时包括三个分类： PlayStation 和 Games 分别都是父分类 Diary 的子分类，Life 是一个没有子分类的分类。\n\n## 编辑文章\n\n用 Markdown 编辑器打开相应文件就能进行文章的编辑了。    \n有关 Markdown 语法可以参考[Markdown语法详解](http://zcw-blog.top/2021/08/19/Markdown%E8%AF%AD%E6%B3%95%E8%AF%A6%E8%A7%A3/)\n\n## 参考文章\n\n[Hexo写作](https://hexo.io/zh-cn/docs/writing)\n","tags":["搭建博客","Markdown","hexo"],"categories":["维护日志"]},{"title":"搭建个人博客","url":"/2021/08/13/搭建个人博客/","content":"本文旨在记录本博客搭建的过程，同时也希望能够对别人有所帮助。\n\n<!-- more -->\n\n本来暑假留校准备比赛，谁知突发疫情，有家不能回，学校封校，比赛延期，节奏从紧张转为舒缓，不由得有些无聊，便生出搭建个人博客的想法。\n由于更新较为频繁，即便按照教程一步步来也难免出现问题，在搭建过程中我也因此走了不少弯路。在遇到问题时多上网找答案，多看不同的解答，多尝试，最后基本都会解决的。\n\n## 关于搭建个人博客\n\n一开始搭建个人博客其实想法比较简单，主要是因为想搭所以搭了。但是在搭建过程中渐渐地对于这件事也有了不同的体会。\n\n搭建个人博客意义何在？\n\n**经验知识总结**\n\n将遇到的问题、解决方法、技术经验、相关知识进行总结，便于日后查阅。\n\n**碎片化学习**\n\n通过网络确实能够学习到很多东西，但从网上学到的东西大都是零零散散的，不够系统，这时便能通过博客把学习的知识一点一点按自己的结构整理记录下来，从而实现碎片化学习。\n\n**分享交流**\n\n通过博客分享，产生沟通与交流，从而互相学习，共同进步。\n\n**记录生活**\n\n博客除了总结技术，还可以记录生活的诗和远方。\n\n**成就感**\n\n在博客的搭建过程中，总是伴随着成就感，而这成就感则会内化成为继续前进的动力。\n\n最后以看到的一句话作结：   \n“对任何渴望进步的人来说，写博客/文章/回答对自己的成长帮助都是巨大的。频率和数量不必过分强求，有话要说就写写，没事就歇歇，随意点。因为坚持写作的那一刻起，你就已经开始受益。”\n\n接下来就来看看怎么搭建个人博客吧：\n\n## 注册 GitHub\n\n打开 GitHub ：[GitHub](http://github.com)   \n点击右上角 sign up 进行注册（由于我注册时没有记录，为了展示注册过程我就随便填了）\n![](https://cdn.jsdelivr.net/gh/reman2021/ImageHosting@main/zcw-blog-picture/GitHub1.0.png)\n填写邮箱\n![](https://cdn.jsdelivr.net/gh/reman2021/ImageHosting@main/zcw-blog-picture/GitHub2.0.png)\n创建密码\n![](https://cdn.jsdelivr.net/gh/reman2021/ImageHosting@main/zcw-blog-picture/GitHub3.png)\n设置用户名\n![](https://cdn.jsdelivr.net/gh/reman2021/ImageHosting@main/zcw-blog-picture/GitHub4.png)\n这里会问你是否接收产品更新和公告，填“n”（no）就行\n![](https://cdn.jsdelivr.net/gh/reman2021/ImageHosting@main/zcw-blog-picture/GitHub5.png)\n接着会有一个简单的真人验证\n![](https://cdn.jsdelivr.net/gh/reman2021/ImageHosting@main/zcw-blog-picture/RV8GPX606MUDVLY2SU8UZJ.png)\n验证过后点击 creat account   \nGitHub会向你的邮箱发送一个验证码，将验证码填入即可\n![](https://cdn.jsdelivr.net/gh/reman2021/ImageHosting@main/zcw-blog-picture/GitHub6.png)\n自此便完成了GitHub的注册\n\n### 新建GitHub仓库\n\n进入个人主页，点击 Repositories ,再点击 New 新建仓库\n![](https://cdn.jsdelivr.net/gh/reman2021/ImageHosting@main/zcw-blog-picture/2021-08-17%2010-42-06-04.png)\n按下图设置后点击 Creat repositoty\n![](https://cdn.jsdelivr.net/gh/reman2021/ImageHosting@main/zcw-blog-picture/2021-08-17%2010-49-26-03.png)\n现在你便拥有了一个名为 hello 的仓库\n![](https://cdn.jsdelivr.net/gh/reman2021/ImageHosting@main/zcw-blog-picture/2021-08-17%2010-54-28-30.png)\n\n## 安装Git\n\n进入[Git官网](https://git-scm.com/)，点击 download 下载\n![](https://cdn.jsdelivr.net/gh/reman2021/ImageHosting@main/zcw-blog-picture/2021-08-16%2014-36-34-91.png)\n选择对应的系统，我的是 windows\n![](https://cdn.jsdelivr.net/gh/reman2021/ImageHosting@main/zcw-blog-picture/2021-08-16%2016-28-46-56.png)\n选择适合自己系统的版本，我的是64位系统，所以选了 64-bit\n![](https://cdn.jsdelivr.net/gh/reman2021/ImageHosting@main/zcw-blog-picture/2021-08-16%2016-30-35-38.png)\n下载完成后打开\n![](https://cdn.jsdelivr.net/gh/reman2021/ImageHosting@main/zcw-blog-picture/2021-08-16%2016-37-52-79.png)\n![](https://cdn.jsdelivr.net/gh/reman2021/ImageHosting@main/zcw-blog-picture/2021-08-16%2016-39-50-31.png)\n*注：第二个新选项是说很多团队已经将他们的默认分支名改为 main . 这是因为2020 年非裔男子乔治·弗洛伊德因白人警察暴力执法惨死而掀起的 Black Lives Matter (黑人的命也是命)运动，很多人认为 master 不尊重黑人，呼吁改为 main.*\n![](https://cdn.jsdelivr.net/gh/reman2021/ImageHosting@main/zcw-blog-picture/2021-08-16%2016-45-45-23.png)\n![](https://cdn.jsdelivr.net/gh/reman2021/ImageHosting@main/zcw-blog-picture/2021-08-16%2016-48-00-63.png)\n![](https://cdn.jsdelivr.net/gh/reman2021/ImageHosting@main/zcw-blog-picture/2021-08-16%2016-51-04-17.png)\n![](https://cdn.jsdelivr.net/gh/reman2021/ImageHosting@main/zcw-blog-picture/2021-08-16%2016-53-56-76.png)\n![](https://cdn.jsdelivr.net/gh/reman2021/ImageHosting@main/zcw-blog-picture/2021-08-16%2016-56-54-22.png)\n![](https://cdn.jsdelivr.net/gh/reman2021/ImageHosting@main/zcw-blog-picture/2021-08-16%2017-07-42-30.png)\n![](https://cdn.jsdelivr.net/gh/reman2021/ImageHosting@main/zcw-blog-picture/2021-08-16%2017-10-04-10.png)\n![](https://cdn.jsdelivr.net/gh/reman2021/ImageHosting@main/zcw-blog-picture/2021-08-16%2017-13-45-75.png)\n点击 install 安装   \n安装完成后进行检验：桌面右键出现如下选项即表示成功\n![](https://cdn.jsdelivr.net/gh/reman2021/ImageHosting@main/zcw-blog-picture/2021-08-16%2017-28-04-84.png)\n如果想看更加详细的安装教程或了解各选项含义，可以参考[Git 详细安装教程（详解 Git 安装过程的每一个步骤）](https://blog.csdn.net/mukes/article/details/115693833 )\n\n## 绑定Git并提交文件（push）\n\n我们利用 SSH 来完成 GitHub 与 Git 的绑定，实现方便快捷地提交文件。    \nSSH 其实是一种网络安全协议，简单介绍如下：    \nSSH（安全外壳协议，Secure Shell 的缩写）是建立在应用层基础上的安全协议。 SSH 是目前较可靠，专为远程登录会话和其他网络服务提供安全性的协议，利用 SSH 协议可以有效防止远程管理过程中的信息泄露问题。简单来说， SSH 就是保障你的账户安全，将你的信息全部加密，防止其他人截获你的数据，还能加快传输速度。    \n若想详细了解，可以参考[详述 SSH 的原理及其应用](https://blog.csdn.net/qq_35246620/article/details/54317740)    \n接下来便介绍如何绑定GitHub和提交文件。\n\n### 绑定GitHub\n\n要用 git 上传文件到 GitHub 首先得利用 SSH 登录远程主机，而登录方式有两种：一种是口令登录；另一种是公钥登录。口令登录每次都要输入密码十分麻烦，而公钥登录省去了输入密码的步骤，因而我们选择公钥授权。首先我们得在 GitHub 上添加 SSH key 配置。     \n首先我们在新建的文件夹中右键打开 Git Bash，输入 ssh 命令，查看本机是否安装 SSH（一般安装 Git 的时候默认安装了）：  \n![](https://cdn.jsdelivr.net/gh/reman2021/ImageHosting@main/zcw-blog-picture/2021-08-17%2000-04-34-28.png)\n![](https://cdn.jsdelivr.net/gh/reman2021/ImageHosting@main/zcw-blog-picture/2021-08-17%2000-12-05-42.png)\n如图便是已安装 SSH    \n输入`ssh-keygen -t rsa`命令，表示我们指定 RSA 算法生成密钥，然后敲四次回车，之后就会生成两个文件，分别为秘钥 id_rsa 和公钥 id_rsa.pub 。文件的位置在 Git Bash 上面都有显示，默认生成在以下目录：\n\n> Linux 系统：~/.ssh\n> \n> Mac 系统：~/.ssh\n> \n> Windows 10 ：C:/Users/ASUS/.ssh\n\n接下来要把公钥 id_rsa.pub 的内容添加到 GitHub。可以通过目录找到 id_rsa.pub 文件的位置，用记事本打开文件复制。如果找不到文件可以直接在输入以下命令 Git Bash 上打开：\n``` bash\n\t$ cd ~/.ssh \n\t$ ls\n\t$ cat id_rsa.pub\n```\n![](https://cdn.jsdelivr.net/gh/reman2021/ImageHosting@main/zcw-blog-picture/2021-08-17%2000-31-03-39.png)\n连带着ssh-rsa的一大串内容就是公钥，**注意：git 中的复制粘贴不是 Ctrl + C 和 Ctrl + V，而是 Ctrl + insert 和 Shift + insert.**复制完公钥后，进入我们的 GitHub 主页，先点击右上角，再点击 settings\n![](https://cdn.jsdelivr.net/gh/reman2021/ImageHosting@main/zcw-blog-picture/2021-08-17%2000-39-15-60.png)\n之后点击 SSH and GPG keys，再点击 New SSH key.\n![](https://cdn.jsdelivr.net/gh/reman2021/ImageHosting@main/zcw-blog-picture/2021-08-17%2010-10-22-37.png)\n将复制的公钥 id_rsa.pub 的内容粘贴到 key 内，标题填不填无所谓，再点击 Add SSH key\n![](https://cdn.jsdelivr.net/gh/reman2021/ImageHosting@main/zcw-blog-picture/2021-08-17%2010-17-23-29.png)\n可以在 Git Bash 中输入`ssh -T git@github.com`验证是否成功，\n第一次会出现下图这种情况，填 yes 就行\n![](https://cdn.jsdelivr.net/gh/reman2021/ImageHosting@main/zcw-blog-picture/v2-5b4f05ea2e2a7fb8b13fd35a9bafa8.png)\n绑定成功\n![](https://cdn.jsdelivr.net/gh/reman2021/ImageHosting@main/zcw-blog-picture/2021-08-17%2010-22-51-09.png)\n\n### 提交文件\n\n提交文件有两种方法：   \n第一种：本地没有 git 仓库   \n- 直接将远程仓库 clone 到本地；    \n- 将文件添加并 commit 到本地仓库；    \n- 将本地仓库的内容 push 到远程仓库。  \n\n第二种：本地有 Git 仓库，并且我们已经进行了多次 commit 操作   \n- 建立一个本地仓库进入，init 初始化；   \n- 关联远程仓库；   \n- 同步远程仓库和本地仓库；   \n- 将文件添加提交到本地仓库；   \n- 将本地仓库的内容 push 到远程仓库。    \n\n#### 本地没有 git 仓库\n首先，进入 GitHub 个人主页，点击进入新建的 text 仓库\n![](https://cdn.jsdelivr.net/gh/reman2021/ImageHosting@main/zcw-blog-picture/2021-08-17%2010-38-52-52.png)\n点击 Code，复制仓库地址\n![](https://cdn.jsdelivr.net/gh/reman2021/ImageHosting@main/zcw-blog-picture/2021-08-17%2010-57-35-21.png)\n然后进入我们准备存储 Git 仓库的目录右键 Git Bash\n![](https://cdn.jsdelivr.net/gh/reman2021/ImageHosting@main/zcw-blog-picture/2021-08-17%2011-02-29-53.png)\n接下来，输入`git clone 仓库地址`，将远程仓库 clone 到本地\n![](https://cdn.jsdelivr.net/gh/reman2021/ImageHosting@main/zcw-blog-picture/2021-08-17%2011-11-07-06.png)\n如图没有 clone 成功，而是报错 OpenSSL SSL_read: Connection was reset, errno 10054（以后可能还会多次遇到），原因是由于国内墙的存在，GitHu b网络不稳定，导致 clone 失败，解决方法很简单，多试几次总会成功的，或者通过 GitHub 国内代理加速，详见[GitHub Proxy代理加速](https://ghproxy.com/)。如果还是不行则输入`git config --global http.sslVerify \"false\"`解除 SSL 认证，再进行 clone 。可参考[Git报错解决：OpenSSL SSL_read: Connection was reset, errno 10054](https://blog.csdn.net/qq_29493173/article/details/114534057)。     \n再 clone 一遍，还是没有成功，仍然是网络网络问题，连接超时，多试几次就好了\n![](https://cdn.jsdelivr.net/gh/reman2021/ImageHosting@main/zcw-blog-picture/2021-08-17%2011-12-11-84.png)\n如下图就是 clone 成功：\n![](https://cdn.jsdelivr.net/gh/reman2021/ImageHosting@main/zcw-blog-picture/2021-08-17%2011-15-46-34.png)\n看看 clone 到本地的仓库内容与远程仓库的内容，是否完全一致\n![](https://cdn.jsdelivr.net/gh/reman2021/ImageHosting@main/zcw-blog-picture/2021-08-17%2011-33-01-59.png)\n接下来创建一个 text.txt 测试文件\n![](https://cdn.jsdelivr.net/gh/reman2021/ImageHosting@main/zcw-blog-picture/2021-08-17%2011-35-32-10.png)\n从此目录进入 Git Bash，输入`git status`命令查看仓库状态\n![](https://cdn.jsdelivr.net/gh/reman2021/ImageHosting@main/zcw-blog-picture/2021-08-17%2011-37-50-72.png)\ntext 已经是一个 Git 仓库了，由图可见刚刚创建的文件 text.txt 没有被追踪，也就是没有提交到本地仓库。现在我们使用`git add`命令将文件添加到了「临时缓冲区」，再用`git commit -m \"提交信息\"`将其提交到本地仓库\n![](https://cdn.jsdelivr.net/gh/reman2021/ImageHosting@main/zcw-blog-picture/2021-08-17%2011-44-25-92.png)\n如果你是第一次提交的话，会让你输入用户名和邮箱\n![](https://cdn.jsdelivr.net/gh/reman2021/ImageHosting@main/zcw-blog-picture/v2-53a22acbdcbd4e1c0f8ba8df5b33f8ce_720w.jpg)\n这时只要再执行如下两行命令即可：\n``` bash\n\t$ git config --global user.name \"你的用户名\"\n\t$ git config --global user.email \"你的邮箱\"\n```\n完成后输入`git log`命令查看仓库提交日志\n![](https://cdn.jsdelivr.net/gh/reman2021/ImageHosting@main/zcw-blog-picture/2021-08-17%2011-51-40-38.png)\n再输入`git status`查看一下仓库状态\n![](https://cdn.jsdelivr.net/gh/reman2021/ImageHosting@main/zcw-blog-picture/2021-08-17%2011-53-36-78.png)\n现在输入`git push origin main`命令，将本地仓库提交到远程仓库，origin是远程主机的名字\n![](https://cdn.jsdelivr.net/gh/reman2021/ImageHosting@main/zcw-blog-picture/v2-a6dd07e3a40ea265f2b821db2f33266c_r.jpg)\n第一次上传需要输入密码，验证成功后，如下图：\n![](https://cdn.jsdelivr.net/gh/reman2021/ImageHosting@main/zcw-blog-picture/2021-08-17%2011-57-05-56.png)\n刷新 GitHub 的 text 仓库，可见测试文件已经上传到了 text 仓库中\n![](https://cdn.jsdelivr.net/gh/reman2021/ImageHosting@main/zcw-blog-picture/2021-08-17%2011-59-29-69.png)\n\n#### 本地有 Git 仓库\n\n首先，建立一个本地仓库text2，使用`git init`命令初始化仓库\n![](https://cdn.jsdelivr.net/gh/reman2021/ImageHosting@main/zcw-blog-picture/2021-08-17%2012-02-57-79.png)\n![](https://cdn.jsdelivr.net/gh/reman2021/ImageHosting@main/zcw-blog-picture/2021-08-17%2012-04-23-17.png)\n输入`git remote add origin 仓库地址`命令，关联远程仓库，接着输入`git pull origin main`命令，同步远程仓库和本地仓库\n![](https://cdn.jsdelivr.net/gh/reman2021/ImageHosting@main/zcw-blog-picture/2021-08-17%2012-08-25-01.png)\n回到本地仓库，可以发现远程仓库的内容已经同步到了本地仓库\n![](https://cdn.jsdelivr.net/gh/reman2021/ImageHosting@main/zcw-blog-picture/2021-08-17%2012-12-32-79.png)\n接下来的步骤与第一种方法一样，可以自行尝试，先输入`git add`和`git commit`命令，将要提交的文件添加并提交到 text2 仓库；然后再输入`git push origin main`命令，将本地仓库修改（或者添加）的内容提交到远程仓库。\n\n## 安装nodejs和Hexo\n\n### 安装nodejs\n\n打开[node.js官网](https://nodejs.org/en/)\n![](https://cdn.jsdelivr.net/gh/reman2021/ImageHosting@main/zcw-blog-picture/2021-08-17%2013-36-15-20.png) \n点击下载，*注：由于 nodejs14 可能在之后出现一些警告（warning），虽然无伤大雅，但是介意的可以找找旧的版本比如 nodejs12 。*下载完成后双击安装，安装直接默认 next ，需要改的只有安装路径，我的路径是D:/node js。详细安装步骤可参考[node.js 安装详细步骤教程](https://blog.csdn.net/antma/article/details/86104068)。      \n安装完成后可以打开 cmd（Win + R 后输入 cmd）检验是否安装成功，用`node -v`和`npm -v`命令检查版本\n![](https://cdn.jsdelivr.net/gh/reman2021/ImageHosting@main/zcw-blog-picture/2021-08-1713-48-03.png)\n\n#### 设置npm在安装全局模块时的路径和环境变量\n\n如果不设置的话，安装模块的时候就会把模块装到 C 盘，占用 C 盘的空间，并且有可能安装好 Hexo 后却无法使用。    \n步骤如下：   \n在 node js 文件夹中新建两个空文件夹 node_cache 、 node_global：\n![](https://cdn.jsdelivr.net/gh/reman2021/ImageHosting@main/zcw-blog-picture/2021-08-17%2013-51-58-37.png)\n打开 cmd ，输入如下两个命令：\n``` bash\n\tnpm config set prefix \"D:\\nodejs\\node_global\"\n\tnpm config set cache \"D:\\nodejs\\node_cache\"\n```\n![](https://cdn.jsdelivr.net/gh/reman2021/ImageHosting@main/zcw-blog-picture/v2-46234877dbb7978d7935e3512a5fd8dc_720w.jpg)\n设置环境变量：win10 系统 --> 打开控制面板 --> 系统 -->高级系统设置 --> 环境变量 ，然后在系统变量中新建一个变量名为`NODE_PATH` ，值为`D:\\node js\\node_global\\node_modules`\n![](https://cdn.jsdelivr.net/gh/reman2021/ImageHosting@main/zcw-blog-picture/2021-08-17%2013-57-24-67.png)\n然后编辑用户变量里的 Path ，将相应 npm 的路径改为：D:\\node js\\node_global\n![](https://cdn.jsdelivr.net/gh/reman2021/ImageHosting@main/zcw-blog-picture/2021-08-17%2013-57-24.png)\n![](https://cdn.jsdelivr.net/gh/reman2021/ImageHosting@main/zcw-blog-picture/2021-08-17%2014-00-12-61.png)\n完成后点击确定即可\n\n#### 测试模块安装\n\n在 cmd 下执行`npm install webpack -g`\n![](https://cdn.jsdelivr.net/gh/reman2021/ImageHosting@main/zcw-blog-picture/2021-08-17%2014-17-27-75.png)\n可见 webpack 这个模块已经在设置默认的文件夹中了\n![](https://cdn.jsdelivr.net/gh/reman2021/ImageHosting@main/zcw-blog-picture/2021-08-17%2014-18-06-86.png)\n\n### 安装Hexo\n\nHexo就是我们的个人博客网站的框架，安装之前要先在GitHub上创建一个仓库，**仓库名称（Repository name）为“用户名.github.io”**，创建好后点击 settings\n![](https://cdn.jsdelivr.net/gh/reman2021/ImageHosting@main/zcw-blog-picture/2021-08-17%2014-20-39-88.png)\n下拉到 GitHub Pages，点击 check it out here\n![](https://cdn.jsdelivr.net/gh/reman2021/ImageHosting@main/zcw-blog-picture/2021-08-17%2014-22-08-23.png)\n出现如下内容就说明成功了\n![](https://cdn.jsdelivr.net/gh/reman2021/ImageHosting@main/zcw-blog-picture/2021-08-17%2014-30-22-05.png)\n接下来安装 Hexo，首先在 D 盘创建文件夹 Blog ，点开 Blog ，鼠标右键打开 Git Bush Here，输入npm命令`npm install -g hexo-cli`安装Hexo\n![](https://cdn.jsdelivr.net/gh/reman2021/ImageHosting@main/zcw-blog-picture/2021-08-17%2014-29-29-07.png)\n安装完成后，输入`hexo init`命令初始化博客\n![](https://cdn.jsdelivr.net/gh/reman2021/ImageHosting@main/zcw-blog-picture/2021-08-17%2014-33-38-97.png)\n然后输入`hexo g`静态部署，nodejs14 版本会出现如下警告（warning），可以不用理会\n![](https://cdn.jsdelivr.net/gh/reman2021/ImageHosting@main/zcw-blog-picture/2021-08-17%2014-35-28-83.png)\n这时网页已经部署完成，输入`hexo s`命令可以查看\n![](https://cdn.jsdelivr.net/gh/reman2021/ImageHosting@main/zcw-blog-picture/2021-08-17%2014-38-09-34.png)\n浏览器输入 http://localhost:4000 就可以打开新部署的网页\n![](https://cdn.jsdelivr.net/gh/reman2021/ImageHosting@main/zcw-blog-picture/v2-5a8d3a94b1eb5e4e79f2e733ddaed2aa_r.jpg)\n看完之后 ctrl +c 停止运行服务器。\n\n### 将Hexo部署到GitHub\n\n回到 Blog 文件夹，用记事本打开 _config.yml 文件\n![](https://cdn.jsdelivr.net/gh/reman2021/ImageHosting@main/zcw-blog-picture/2021-08-17%2014-42-24-44.png)\n在底部填写以下内容：\n``` bash\n\tdeploy:\n\t  type: git\n\t  repository: https://github.com/reman2021/reman2021.github.io.git  #你的仓库地址\n\t  branch: master\n```\n**特别要注意冒号后面要有空格**\n![](https://cdn.jsdelivr.net/gh/reman2021/ImageHosting@main/zcw-blog-picture/v2-7f9e09b1827fd9202088cc9d9b19880e_720w.png)\n仓库地址之前也讲过，其实就在这里\n![](https://cdn.jsdelivr.net/gh/reman2021/ImageHosting@main/zcw-blog-picture/2021-08-17%2014-48-34-96.png)\n回到 Blog 文件夹，打开 Git Bash，输入命令`npm install hexo-deployer-git --save`安装 Git 部署插件\n![](https://cdn.jsdelivr.net/gh/reman2021/ImageHosting@main/zcw-blog-picture/v2-a5172536904c8eaa602debc6e54c877b_r.jpg)\n然后分别输入以下三条命令：\n``` bash\n\thexo clean   #清除缓存文件 db.json 和已生成的静态文件 public\n\thexo g       #生成网站静态文件到默认设置的 public 文件夹(hexo generate 的缩写)\n\thexo d       #自动生成网站静态文件，并部署到设定的仓库(hexo deploy 的缩写)\n```\n![](https://cdn.jsdelivr.net/gh/reman2021/ImageHosting@main/zcw-blog-picture/2021-08-17%2014-53-56-23.png)\n![](https://cdn.jsdelivr.net/gh/reman2021/ImageHosting@main/zcw-blog-picture/2021-08-17%2014-54-22-19.png)\n完成以后，打开浏览器，输入 https://用户名.github.io 就可以打开你的网页了。     \n现在虽然可以访问我们的网站，但是网址是GitHub提供的：http://xxxx.github.io 而如果想使用自己的个性化域名，则需绑定自己的域名，这就需要进行域名购买和解析。\n\n## 购买域名与解析域名（非必须）\n\n### 购买域名\n\n接下来的操作不需要购买域名也能进行，我在一开始本着勤俭节约的优良风尚（穷），并没有购买域名，是在之后无意间看到腾讯 DNSPod 有5元无门槛优惠券，最后还是花重金（2元）购买了域名，终究还是腾讯高。        \n购买域名有几个网站，主要有[Godaddy](https://sg.godaddy.com/zh/offers/domains/godaddycom?isc=gennbacn07&countryview=1&currencyType=CNY&utm_source=baidu&utm_medium=cpc&utm_term=Title&utm_campaign=zh-cn_corp_sem_x_b_x_bz_001&utm_content=Brandzone%20PC&gclid=CIXh9LjPmecCFdOavAoddDkHcw&gclsrc=ds)，[腾讯云](https://cloud.tencent.com/)，[万网](https://wanwang.aliyun.com/)。    \n由于我是在腾讯云购买的域名，便详细讲一下腾讯云购买域名步骤。    \n首先打开[DNSPod 域名狂欢季页面](https://cloud.tencent.com/act/pro/DNSPodDomainsCarnival)，可以看到2张5元无门槛优惠券，DNSPOD全产品代金券和域名注册代金券，都是可以用来注册域名的。由于我已经领了，所以没有显示域名注册代金券。     \n![](https://cdn.jsdelivr.net/gh/reman2021/ImageHosting@main/zcw-blog-picture/2021-08-17%2013-12-03-32.png)\n然后找到域名注册\n![](https://cdn.jsdelivr.net/gh/reman2021/ImageHosting@main/zcw-blog-picture/2021-08-17%2013-13-51-49.png)\n查询想要注册的域名\n![](https://cdn.jsdelivr.net/gh/reman2021/ImageHosting@main/zcw-blog-picture/2021-08-17%2013-16-03-01.png)\n点击加入购物车后，点击立即购买后进入订单详情页\n点击添加免费 SSL 证书\n![](https://cdn.jsdelivr.net/gh/reman2021/ImageHosting@main/zcw-blog-picture/2021-08-17%2013-18-45-74.png)\n注意根据需要取消勾选自动续费\n![](https://cdn.jsdelivr.net/gh/reman2021/ImageHosting@main/zcw-blog-picture/2021-08-17%2013-19-22-98.png)\n提交订单付费（优惠券自动抵扣5元）    \n之后还要创建实名模板，需要上传身份证信息，按流程走就行，审核也挺快的，可以在域名注册-我的域名查看\n\n### 解析域名\n\n在域名注册找到解析并添加如下两条解析记录：\n![](https://cdn.jsdelivr.net/gh/reman2021/ImageHosting@main/zcw-blog-picture/2021-08-17%2013-27-19-56.png)\n![](https://cdn.jsdelivr.net/gh/reman2021/ImageHosting@main/zcw-blog-picture/2021-08-17%2015-50-49-40.png)\nIPV4 地址可以通过 ping 得到，打开 cmd 输入：\n`ping reman2021.github.io    #ping + 你的GitHub的网址`\n![](https://cdn.jsdelivr.net/gh/reman2021/ImageHosting@main/zcw-blog-picture/2021-08-17%2015-57-10-92.png)\n接着打开 Blog/source，添加 CNAME 文件，可以先用记事本创建一个 txt 文件，打开后写上你的域名，(注：不要加 www. 否则每次访问都必须加 www. ，但如果不带有 www. ，以后访问的时候带不带 www. 都可以访问)，另存后记得要重命名为CNAME，并且将 .txt 删除，如下图：\n![](https://cdn.jsdelivr.net/gh/reman2021/ImageHosting@main/zcw-blog-picture/2021-08-17%2016-03-34-93.png)\n![](https://cdn.jsdelivr.net/gh/reman2021/ImageHosting@main/zcw-blog-picture/2021-08-17%2016-05-42-20.png)\n回到 Blog 文件夹，右键打开 Git Bash，依次走完 hexo 三部曲：\n``` bash\n\thexo clean\n\thexo g\n\thexo d\n```\n打开 GitHub，看看 CNAME 文件是否已经在仓库中，点击 settings\n![](https://cdn.jsdelivr.net/gh/reman2021/ImageHosting@main/zcw-blog-picture/2021-08-17%2016-09-57-59.png)\n在 GitHub Pages 查看你的域名是否保存\n![](https://cdn.jsdelivr.net/gh/reman2021/ImageHosting@main/zcw-blog-picture/2021-08-17%2016-12-36-78.png)\n如果域名是空白的话看看能不能自行添加     \n如果仓库中没有 CNAME 文件，也可以自己添加，方法如下：\n![](https://cdn.jsdelivr.net/gh/reman2021/ImageHosting@main/zcw-blog-picture/2021-08-17%2016-16-24-60.png)\n![](https://cdn.jsdelivr.net/gh/reman2021/ImageHosting@main/zcw-blog-picture/2021-08-17%2016-17-49-37.png)\n![](https://cdn.jsdelivr.net/gh/reman2021/ImageHosting@main/zcw-blog-picture/2021-08-17%2016-18-47-55.png)\n\n## 创作文章\n\n现在博客已经搭建好了，虽然比较简陋，但是已经可以进行文章创作啦。\n文章创作指南：[在Hexo博客上进行创作](http://zcw-blog.top/2021/08/17/%E5%9C%A8hexo%E5%8D%9A%E5%AE%A2%E4%B8%8A%E8%BF%9B%E8%A1%8C%E5%88%9B%E4%BD%9C/)\n\n## 设置NexT主题\n\n目前 Hexo 博客有许多主题可供选择，常见的有 NexT、Yilia、Hacker 等等，可以根据喜好自行选择，上网查找的话相关资料也非常多。这里提供两篇参考文章：\n[Hexo主题推荐](https://www.bilibili.com/read/cv4499195/)\n[Hexo 好看的主题推荐](https://blog.csdn.net/zgd826237710/article/details/99671027)\n我用的是 NexT 主题，也是目前使用人数最多的主题（大概），主要当时只知道这一个，现在虽然眼馋其他主题但是懒得换，不过 NexT 主题的简洁大气也深得我心。     \nNexT主题下载地址：[theme-next/hexo-theme-next](https://github.com/theme-next/hexo-theme-next)    \n打开 Blog 文件夹，右键 Git Bash，输入`git clone https://github.com/theme-next/hexo-theme-next themes/next`将 next 主题下载到目录 Blog/themes      \n![](https://cdn.jsdelivr.net/gh/reman2021/ImageHosting@main/zcw-blog-picture/v2-4d4e54afc1550a4e6af02fe489c696ce_r.jpg)\n![](https://cdn.jsdelivr.net/gh/reman2021/ImageHosting@main/zcw-blog-picture/2021-08-17%2015-24-53-73.png)\n打开 Blog 下的 _config.yml (称为**站点配置文件**)，找到并修改以下内容**（注意冒号后都要有空格）**：\n``` bash\n\t# Site\n\ttitle: ZCW_Blog\t\t\t#标题\n\tsubtitle: ' '\n\tdescription: ' '\t\t#简介或者格言\n\tkeywords:\n\tauthor: reman\t\t\t#作者\n\tlanguage: zh-HK\t\t\t#主题语言\n\ttimezone: Asia/Shanghai\t#中国的时区\n\t\n\t# Extensions\n\t## Plugins: https://hexo.io/plugins/\n\t## Themes: https://hexo.io/themes/\n\ttheme: next   #主题改为next\n```\n主题语言可以在 themes/next/language 中查看，我选的是 zh-CN（简体中文），同时我在博客中加入了一键切换繁/简体的功能，具体可参考\n![](https://cdn.jsdelivr.net/gh/reman2021/ImageHosting@main/zcw-blog-picture/2021-08-17%2015-30-43-48.png)      \nnext主题有四种： Muse 、 Mist 、 Pisces 、 Gemini ，预览可参考[2019-03-06 NexT四种主题](https://www.jianshu.com/p/e7e67b900db4)，跟现在的差别不是很大     \n我选的是 Gemini（默认主题是Muse），打开 Blog/themes/next/ 下的 _config.yml（称为**主题配置文件**），将你选的主题前的注释（#）删除就行了，注意只能选一个，不选的主题要注释掉，不然会报错  \n``` bash\n\t# Schemes\n\t#scheme: Muse\n\t#scheme: Mist\n\t#scheme: Pisces\n\tscheme: Gemini\n```\n回到根目录 Blog 打开 Git Bash，分别输入如下三条命令：  \n``` bash\n\thexo clean\n\thexo g\n\thexo d\n```\n完成后打开你的博客查看即可。      \n注：由于网络问题 hexo d 的时候可能会报错，hexo 三部曲多试几次就行了\n\n## NexT主题优化\n\n[Hexo+NexT配置优化指南](http://zcw-blog.top/2022/04/24/Hexo+Next%E9%85%8D%E7%BD%AE%E4%BC%98%E5%8C%96%E6%8C%87%E5%8D%97/)","tags":["搭建博客"],"categories":["维护日志"]},{"title":"Hello World","url":"/2021/08/11/hello-world/","content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n <!-- more -->\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n"}]